import numpy as np
from astropy.io import fits as pyfits
from scipy import ndimage
from scipy.ndimage.filters import maximum_filter1d as maxfilt
from scipy.io import readsav
import os
import scipy.interpolate as scin
from scipy.linalg import solve_banded
import scipy.ndimage.filters as filters
from scipy.linalg.fblas import dgemm
from astropy.modeling import models, fitting
from astropy.stats.funcs import sigma_clip
from matplotlib import pyplot as plt
import Image, ImageDraw
import sys
import math, random
from itertools import product
from warnings import warn #just for least_squares_solver
from scipy.optimize import curve_fit
from mpl_toolkits.mplot3d.axes3d import Axes3D
from scipy import signal

def least_squares_solver(a, b, residuals=False):
	#	Inputs
	#	a : (M, N) array_like "Coefficient" matrix.
	#	b : (M,) array_like ordinate or "dependent variable" values.
	#	Returns
	#	x : (M,) ndarray
	#   Least-squares solution. The shape of `x` depends on the shape of `b`.
	#	residuals : int (Optional)
	#   Sums of residuals: squared Euclidean 2-norm for each column in ``b - a*x``.
    if type(a) != np.ndarray or not a.flags['C_CONTIGUOUS']:
       warn('Matrix a is not a C-contiguous numpy array. The solver will create a copy, which will result' + \
            ' in increased memory usage.')
    a = np.asarray(a, order='C')
    i = dgemm(alpha=1.0, a=a.T, b=a.T, trans_b=True)
    x = np.linalg.solve(i, dgemm(alpha=1.0, a=a.T, b=b)).flatten()
    if residuals:
        return x, np.linalg.norm(np.dot(a, x) - b)
    else:
        return x

class UFarray:
    def __init__(self):
        # Array which holds label -> set equivalences
        self.P = []

        # Name of the next label, when one is created
        self.label = 0

    def makeLabel(self):
        r = self.label
        self.label += 1
        self.P.append(r)
        return r
    
    # Makes all nodes "in the path of node i" point to root
    def setRoot(self, i, root):
        while self.P[i] < i:
            j = self.P[i]
            self.P[i] = root
            i = j
        self.P[i] = root

    # Finds the root node of the tree containing node i
    def findRoot(self, i):
        while self.P[i] < i:
            i = self.P[i]
        return i
    
    # Finds the root of the tree containing node i
    # Simultaneously compresses the tree
    def find(self, i):
        root = self.findRoot(i)
        self.setRoot(i, root)
        return root
    
    # Joins the two trees containing nodes i and j
    # Modified to be less agressive about compressing paths
    # because performance was suffering some from over-compression
    def union(self, i, j):
        if i != j:
            root = self.findRoot(i)
            rootj = self.findRoot(j)
            if root > rootj: root = rootj
            self.setRoot(j, root)
            self.setRoot(i, root)
    
    def flatten(self):
        for i in range(1, len(self.P)):
            self.P[i] = self.P[self.P[i]]
    
    def flattenL(self):
        k = 1
        for i in range(1, len(self.P)):
            if self.P[i] < i:
                self.P[i] = self.P[self.P[i]]
            else:
                self.P[i] = k
                k += 1

def cclabel(img):
    print'Running connected component method'
    data=img
    width, height = data.shape
 
    # Union find data structure
    uf = UFarray()
 
    #
    # First pass
    #
 
    # Dictionary of point:label pairs
    labels = {}
 
    for y, x in product(range(height), range(width)):
 
        #
        # Pixel names were chosen as shown:
        #
        #   -------------
        #   | a | b | c |
        #   -------------
        #   | d | e |   |
        #   -------------
        #   |   |   |   |
        #   -------------
        #
        # The current pixel is e
        # a, b, c, and d are its neighbors of interest
        #
        # 255 is white, 0 is black
        # White pixels part of the background, so they are ignored
        # If a pixel lies outside the bounds of the image, it default to white
        #
 
        # If the current pixel is white, it's obviously not a component...
        if data[x, y] == 255:
            pass
 
        # If pixel b is in the image and black:
        #    a, d, and c are its neighbors, so they are all part of the same component
        #    Therefore, there is no reason to check their labels
        #    so simply assign b's label to e
        elif y > 0 and data[x, y-1] == 0:
            labels[x, y] = labels[(x, y-1)]
 
        # If pixel c is in the image and black:
        #    b is its neighbor, but a and d are not
        #    Therefore, we must check a and d's labels
        elif x+1 < width and y > 0 and data[x+1, y-1] == 0:
 
            c = labels[(x+1, y-1)]
            labels[x, y] = c
 
            # If pixel a is in the image and black:
            #    Then a and c are connected through e
            #    Therefore, we must union their sets
            if x > 0 and data[x-1, y-1] == 0:
                a = labels[(x-1, y-1)]
                uf.union(c, a)
 
            # If pixel d is in the image and black:
            #    Then d and c are connected through e
            #    Therefore we must union their sets
            elif x > 0 and data[x-1, y] == 0:
                d = labels[(x-1, y)]
                uf.union(c, d)
 
        # If pixel a is in the image and black:
        #    We already know b and c are white
        #    d is a's neighbor, so they already have the same label
        #    So simply assign a's label to e
        elif x > 0 and y > 0 and data[x-1, y-1] == 0:
            labels[x, y] = labels[(x-1, y-1)]
 
        # If pixel d is in the image and black
        #    We already know a, b, and c are white
        #    so simpy assign d's label to e
        elif x > 0 and data[x-1, y] == 0:
            labels[x, y] = labels[(x-1, y)]
 
        # All the neighboring pixels are white,
        # Therefore the current pixel is a new component
        else: 
            labels[x, y] = uf.makeLabel()
 
    #
    # Second pass
    #
 
    uf.flatten()
 
    colors = {}

    # Image to display the components in a nice, colorful way
    output_img = Image.new("RGB", (width, height))
    outdata = output_img.load()

    for (x, y) in labels:
 
        # Name of the component the current point belongs to
        component = uf.find(labels[(x, y)])

        # Update the labels with correct information
        labels[(x, y)] = component
 
        # Associate a random color with this component 
        if component not in colors: 
            colors[component] = (random.randint(0,255), random.randint(0,255),random.randint(0,255))

        # Colorize the image
        outdata[x, y] = colors[component]

    return (labels)

def trace_orders():
	figure=False
	print'Tracing orders'
	flat=pyfits.open('radius_masterflat.fits')
	flat=flat[0].data
	flat=flat.T
	smoothed=np.zeros_like(flat)
	a,b=smoothed.shape
	#primary smoothing
	for i in np.arange(1,a):
		smoothed[i,:]=ndimage.filters.gaussian_filter1d(flat[i,:],25)
	#sobel operator
	dx=ndimage.sobel(smoothed,0)
	#run connected component analysis

	filtered=np.ones_like(flat)
	zeros=np.zeros_like(flat)
	filtered[np.where(np.abs(dx)<0.058*np.max(smoothed))]=zeros[np.where(np.abs(dx)<0.058*np.max(smoothed))]
	filtered=filtered*255

	labels=cclabel(filtered)

	components={} #preset data structure
	for key, value in labels.iteritems():
		if value not in components:
			components[value]=[]
			components[value].append(key)
		else:
			components[value].append(key)

	#filter for good orders
	orderparameters=[]
	blank=np.zeros_like(flat)
	for i in components:
		xx=[]
		yy=[]
		if len(components[i])>b*5:
			for j in components[i]:
				blank[j]=1.
				#fit polynomials to orders
				c,d=j
				xx.append(c)
				yy.append(d)
			coefficients=np.polyfit(yy,xx,4) #fit
			orderparameters.append(coefficients)
	
	orderparameters[0]=[]
	orderparameters[-1]=[]
	

	np.save('order_definition_parameters',orderparameters)
	if figure==True:
		plt.subplot(2,2,1)
		plt.imshow(flat)
		plt.colorbar()
		plt.subplot(2,2,2)
		plt.imshow(dx)
		plt.colorbar()
		plt.subplot(2,2,3)
		plt.imshow(blank)
		plt.subplot(2,2,4)
		plt.imshow(flat)
		for ord in orderparameters:
			if ord!=[]:
				yyy=np.polyval(ord,np.arange(flat.shape[1]))
				plt.plot(np.arange(flat.shape[1]),yyy,color='red')
				#if ord!=[]: print ord[-1],np.min(yyy)
		plt.show()
	return orderparameters

def arc_wavelength_solution(hdu):
	#hdu=fits.open('17feb11982_reduced.fits') #example
	#pass in hdu to this - and flagset for x-axis inversion if ccdtype == blahblah
	#hdu=fits.open('17feb12084_reduced.fits') 
	def order_checking(hdu):

		refid = [0.00439460411413, 0.00502024811992, 0.0062619891041, 0.00503277804435, 
		0.00486253391175, 0.00573025899744, 0.00495344035207, 0.00579975847961, 0.00545215370547, 
		0.00602070291121, 0.00545165040525, 0.00490565305432, 0.00640667416572, 0.00935896847754, 
		0.0106392381414, 0.0102313813886, 0.00876981607151, 0.00566579837806, 0.00546263485897, 
		0.0046702944198, 0.00324541075213, 0.00329852566477, 0.00359798167694, 0.00363826068609, 
		0.00436645612966, 0.00545120953777, 0.00824923258314, 0.00959659127131, 0.0104123569094, 
		0.0105790538728, 0.0086130616481, 0.00759670355261, 0.00625970185834, 0.0056933436422, 
		0.00643226966442, 0.00632254318634, 0.00568272810249, 0.00454357862572, 0.00503182104989, 
		0.00687283856936, 0.00604128706836, 0.00645546999609, 0.00523187268346, 0.00420209825222, 
		0.00449614873924, 0.00450988658966, 0.00464043189809, 0.0050209948841, 0.00432541226701, 
		0.00451200265781, 0.00499999425564, 0.00545822310049, 0.00499333946616, 0.00460301039681, 
		0.00374173305357, 0.0041962742248, 0.0056974589086, 0.00534142491822, 0.00541772837937, 
		0.00433533472193, 0.00493579795702, 0.0118019192939, 0.0972353443785, 0.334015561772, 
		0.425459398858, 0.434336116351, 0.284645798389, 0.0743551796258, 0.016187743109, 
		0.00733930607499, 0.00568862016991, 0.00500087463433, 0.00527192754243, 0.00528050437617, 
		0.00549828128641, 0.00565617081573, 0.00470252117418, 0.00434442991408, 0.00357622595535, 
		0.00333546772427, 0.00403250371832, 0.00397706257118, 0.00529758154809, 0.00503262642964, 
		0.0036345413761, 0.00396461970516, 0.00534016705909, 0.00596091409185, 0.00668802974287, 
		0.00636239429783, 0.00526520153123, 0.00480564194548, 0.00485046991677, 0.0041606992434, 
		0.00280256703101, 0.00277621263866, 0.00305147525459, 0.00367048857812, 0.00409141934606, 
		0.00400302228237, 0.00351952383536, 0.00308759406791, 0.00316700778515, 0.00365911745984, 
		0.0033576179095, 0.00368816879084, 0.00301497135959, 0.00395906296071, 0.00498484410015, 
		0.00464273749998, 0.00490821690225, 0.00446819057849, 0.00371737519275, 0.00404018385515, 
		0.00374250081839, 0.00389357664803, 0.00355439925396, 0.00343548079652, 0.00404134909898, 
		0.00371177310276, 0.0038884372009, 0.00419448414047, 0.00500477118948, 0.0140743491855, 
		0.0206073451035, 0.0246235024024, 0.0243817865946, 0.01362376765, 0.00677458602072, 
		0.00649654943036, 0.00519711226861, 0.00519528996312, 0.00491631283593, 0.00447629454324, 
		0.00387851051519, 0.00399092713012, 0.00589701415184, 0.0066042325014, 0.00785221188234, 
		0.00750056213109, 0.00863684905505, 0.0111437831993, 0.0176911579909, 0.0199744386158, 
		0.0202703669664, 0.015489283123, 0.0101831478098, 0.0075832403369, 0.00828822644915, 
		0.0080399984869, 0.00822478790869, 0.00791138518475, 0.00827166730104, 0.00676708410143, 
		0.00690911889279, 0.0067190352953, 0.00723394470374, 0.00674357239951, 0.00703221187224, 
		0.00611244182604, 0.00628327217163, 0.00673818095773, 0.00777704875045, 0.00805864383563, 
		0.00768941709147, 0.00764119655865, 0.00664820899211, 0.00667280032146, 0.00669159517334, 
		0.00673988820975, 0.00730004603552, 0.00711113036161, 0.0064517299051, 0.00702289467551, 
		0.00632160878584, 0.00672445398104, 0.00628963446798, 0.00661650085621, 0.00698048449324, 
		0.00626057217288, 0.0069515204168, 0.0070100196128, 0.00654654564802, 0.00724201839507, 
		0.00803035919771, 0.00714378887491, 0.007587940577, 0.00862954085433, 0.00876673160358, 
		0.00866964723987, 0.0079048832083, 0.00717387314292, 0.00683725063828, 0.00668019610228, 
		0.00735045911795, 0.00688118399567, 0.00678791213658, 0.00660998519648, 0.00771155937952, 
		0.0100197266658, 0.00968315908342, 0.010184894585, 0.00968938817938, 0.00894905727272, 
		0.00914096854803, 0.011412113944, 0.0555392217305, 0.446671983154, 0.890436237547, 1.0, 
		0.924215478252, 0.419672616052, 0.0829322947932, 0.0189163425543, 0.00970332667065, 
		0.00769897012048, 0.00786932482363, 0.00737063299532, 0.00812023269502, 0.00784021000453, 
		0.00769677320618, 0.00725334414585, 0.00589281372362, 0.00707716202081, 0.00867155488664, 
		0.0108199197139, 0.0107417150514, 0.00941836741875, 0.00949630768438, 0.00804635465522, 
		0.00791092220419, 0.00689068178186, 0.00575739804233, 0.00622434504769, 0.00717775469202, 
		0.00711423753918, 0.00709645836099, 0.00733026458595, 0.00805575779992, 0.00798351686954, 
		0.00756624978231, 0.00723455594239, 0.00709485505609, 0.00693735631389, 0.00679371483124, 
		0.00663405331832, 0.00697850462097, 0.00766981323085, 0.0071219428447, 0.00893142884463, 
		0.0100975621694, 0.0102743141085, 0.0121528958607, 0.0081640335158, 0.0057102889304, 
		0.00618693669097, 0.0105230987737, 0.0117884876121, 0.0126939744624, 0.00985768142993, 
		0.00686398475312, 0.005498428025, 0.00467098761579, 0.0051526778289, 0.00542032154536, 
		0.00524603156065, 0.00572607779648, 0.00602647102564, 0.00586837909642, 0.00483867605928, 
		0.00518769336615, 0.00625128376606, 0.0177178580864, 0.0342214946277, 0.0392570087991, 
		0.0384615958854, 0.0267911486185, 0.0128779913546, 0.0123877499255, 0.00896289123735, 
		0.00651689222191, 0.00553842676609, 0.00534625950833, 0.00527423928452, 0.00408166356065, 
		0.00524036862797, 0.00503581818348, 0.00525154747714, 0.00582841491165, 0.00610704525418, 
		0.00625019719469, 0.00657210695676, 0.00616584264917, 0.00476113636349, 0.00522397999134, 
		0.00447329491836, 0.00587514334417, 0.00611369580646, 0.00633112744287, 0.00620052987333, 
		0.00552684261795, 0.00290987269973, 0.00274639517564, 0.00340835572906, 0.00325319670268, 
		0.0036624736302, 0.00517618232333, 0.00602501493795, 0.0118536266263, 0.0879012895489, 
		0.43822025572, 0.625935980618, 0.655867806561, 0.505647399837, 0.151173516047, 
		0.0264272789873, 0.00715979634292, 0.00556160669818, 0.0051812294635, 0.00436110581492, 
		0.0042900208354, 0.00295028123662, 0.00219709813419, 0.00260373900334, 0.00556577266404, 
		0.0117526229173, 0.0125193934901, 0.0120054087017, 0.00923178975944, 0.00519561126374, 
		0.0031832435242, 0.00309571217857, 0.00195451724458, 0.00234034384292, 0.0016092417906, 
		0.00233412348787, 0.00294963452262, 0.00288846795235, 0.0027267392008, 0.00268559983477, 
		0.00296187830034, 0.00334991146543, 0.00292346401954, 0.00240628864809, 0.001889695953, 
		0.00201259382854, 0.00247929890298, 0.00196513937224, 0.00218036353222, 0.00461508365978, 
		0.0187251855598, 0.0370376161825, 0.0419429969765, 0.0397129447032, 0.0200083751802, 
		0.00603363045132, 0.00267921606565, 0.00319544271417, 0.00509366015166, 0.00752888016069, 
		0.0093169123943, 0.0091617124597, 0.0055850636789, 0.00379809193052, 0.00354878429821, 
		0.00317111694344, 0.00209069061836, 0.00088758938311, 0.00175525068225, 0.00243124683344, 
		0.00245497530868, 0.00218820144646, 0.00297892156838, 0.00236253760277, 0.00320954381121, 
		0.00303931957302, 0.00290390698349, 0.00315715783259, 0.00353865901343, 0.00309237539676, 
		0.00325415193167, 0.00231219854006, 0.0029403366954, 0.00167008206691, 0.00229711994391, 
		0.00431879333096, 0.00663836636052, 0.00688792960163, 0.00732884924878, 0.00462113909722, 
		0.00350934262999, 0.00278918286114, 0.00240447116333, 0.00242423078497, 0.00307611750354, 
		0.00272784629359, 0.00336589704472, 0.00312802467891, 0.00340038452795, 0.00397621718864, 
		0.00465329976803, 0.00428499909359, 0.00266534678641, 0.00200904416472, 0.00336295827372, 
		0.00179432601993, 0.00202281068003, 0.00244582111599, 0.00194493615557, 0.00309070927462, 
		0.00238490952728, 0.00335379318487, 0.00357643808769, 0.0040638783534, 0.00424675189593, 
		0.00218426500827, 0.00172807021897, 0.00227511234307, 0.00166527706885, 0.00279852946856, 
		0.00292468127123, 0.00281662055679, 0.00346833025288, 0.00250139806059, 0.00366636659918, 
		0.00276533013943, 0.00419795466685, 0.00308659010884, 0.00230852879135, 0.00167841539818, 
		0.00190612484924, 0.00200639370553, 0.00311600708655, 0.00463859228515, 0.00426696525012, 
		0.00472351493627, 0.00415197508129, 0.00476682604908, 0.00349260452602, 0.00328341179919, 
		0.00211422936948, 0.0023058732324, 0.000242881017008, 0.000265787976859, 0.000430469611281, 
		0.000938624131139, 0.000847877117319, 0.00147415008455, 0.000871929816125, 0.00173850107545, 
		0.00168754405102, 0.00209913422143, 0.00166616634048, 0.0014502707593, 0.00442149495295, 
		0.021063688544, 0.0799126440213, 0.121696934382, 0.130365132713, 0.103681284944, 
		0.0408272821261, 0.0187577334968, 0.0411043959652, 0.0546092735276, 0.0544615251512, 
		0.0446502399385, 0.0177425791394, 0.0100612814414, 0.00846561514088, 0.00483661016261, 
		0.00240967248989, 0.00225065844878, 0.00187584925468, 0.00096748846563, 0.00102070254777, 
		0.0, 0.000783776770888, 0.00155499381877, 0.00184567055532, 0.00282400906909, 
		0.00187587094273, 0.000947254622069, 0.000782954522526, 0.000589216730036, 
		0.000170366078173, 0.000531837456231, 0.000879189840488, 0.00134998927767, 
		0.00288941151515, 0.0032371681191, 0.0040651818637, 0.00375124338296, 0.00207596141936, 
		0.00191383785724, 0.00272130587689, 0.00376885654983, 0.00525449786364, 0.00476643878402, 
		0.00529568709218, 0.00371774893384, 0.00386797914192, 0.00382100827362, 0.00298663703531, 
		0.00391758263511, 0.00379666605683, 0.00478117704903, 0.00555852529379, 0.00638519258944, 
		0.0055925518978, 0.00457489274209, 0.00411792416553, 0.00397264345229, 0.00410697292797, 
		0.0059156910413, 0.00586880274692, 0.00552629870704, 0.00383681808895, 0.00324103958457, 
		0.00355700630615, 0.00392876040949, 0.00425147527929, 0.00420760893185, 0.00371270980783, 
		0.00318623474111, 0.00266957707151, 0.00274093752618, 0.00324109105699, 0.00316245475456, 
		0.0031696405743, 0.00324441493876, 0.00472195526677, 0.00584912679892, 0.00652654746867, 
		0.0071236383786, 0.007213320386, 0.00638043521928, 0.00605016937039, 0.00570533983556, 
		0.00437475886452, 0.00470850030771, 0.00533528415894, 0.00638230658211, 0.00769886832676, 
		0.00832216734963, 0.00748197611861, 0.00742011046108, 0.00654302349533, 0.00679487897061, 
		0.00786136374644, 0.00853206869219, 0.0154861487576, 0.0493518372559, 0.0794240353131, 
		0.0867725160793, 0.075039545996, 0.0352430366233, 0.0101425599736, 0.00536463817622, 
		0.00378981980289, 0.00363789478584, 0.00357677830219, 0.00483478662574, 0.00500069946434, 
		0.00661269945908, 0.00763314340878, 0.00827125277061, 0.00712385520873, 0.00596000474322, 
		0.00572321760243, 0.00489197990855, 0.0047881971307, 0.00432758594877, 0.00414211077212, 
		0.00520001271252, 0.00537229356198, 0.00551399598091, 0.00636730522602, 0.00672313073523, 
		0.00710908512995, 0.00709792062412, 0.00576429300453, 0.00631510062541, 0.00657437394527, 
		0.00759984671582, 0.00816368493319, 0.00814501969804, 0.00741755757053, 0.00627254596368, 
		0.0058127242803, 0.0060085753299, 0.00490961445714, 0.00516620389383, 0.00525898646968, 
		0.00590270536277, 0.00599947393931, 0.00702022939893, 0.00736936376424, 0.0102410023276, 
		0.0108643972894, 0.0111348970483, 0.00858832121427, 0.00623722146174, 0.00605212557281, 
		0.00502555658403, 0.0052729612512, 0.00446751468726, 0.0046524352435, 0.00518188849871, 
		0.00508863851886, 0.0059949522436, 0.00671183318044, 0.00534956066618, 0.00572590455456, 
		0.00624782069785, 0.00649104188701, 0.00747264008818, 0.00632381930639, 0.00743934279031, 
		0.00745657031383, 0.00744607771943, 0.00688921616095, 0.00619096557724, 0.0064093673107, 
		0.00589336077058, 0.00622959193011, 0.00687137200449, 0.00659672542591, 0.00684276042067, 
		0.00591849829569, 0.00563383080559, 0.00573878550435, 0.00501142281655, 0.00584856759009, 
		0.0052832366189, 0.00585136412133, 0.00625425279304, 0.00555005028154, 0.00754432986659, 
		0.00787239177587, 0.00917053579895, 0.00933016099985, 0.00878021310282, 0.00951489098396, 
		0.00889076578018, 0.00746825648334, 0.00714555667442, 0.00682175504836, 0.00673108753015, 
		0.00874649438703, 0.0122602974084, 0.0223960499347, 0.0310978560157, 0.0347911725352, 
		0.0183504230822, 0.011453409808, 0.0102164047253, 0.0100278030109, 0.0116565112343, 
		0.0141797943102, 0.0161473325836, 0.0158134862298, 0.0134342185753, 0.00926909325516, 
		0.0116096441261, 0.0475537134786, 0.0919853506808, 0.101357847238, 0.0971540755413, 
		0.0482671280267, 0.0151854729316, 0.00957404222234, 0.00804683641416, 0.00789850314321, 
		0.00843503351986, 0.00856881940787, 0.00850587954482, 0.00835582829296, 0.00895817096221, 
		0.00825344563186, 0.00852138116827, 0.00818740960359, 0.00812002054558, 0.00759819877612, 
		0.00775004265802, 0.00821124653035, 0.0069428336811, 0.00726588909473, 0.00802352742653, 
		0.00665686473955, 0.00729588695226, 0.00815485291934, 0.00745891755527, 0.008622424846, 
		0.0100275311479, 0.0157904394377, 0.0167190611822, 0.0161967862751, 0.0118005793883, 
		0.00745237596707, 0.00727293784995, 0.0178220781343, 0.0490955337425, 0.0589861316812, 
		0.0588944339606, 0.0460394564796, 0.0177785402273, 0.0114160350826, 0.015259127641, 
		0.0213150844626, 0.0221529993671, 0.0235515631387, 0.0165731790547, 0.00939056109218, 
		0.00745140467136, 0.00680812322167, 0.00721352323788, 0.00629306421115, 0.00731569134776, 
		0.00756780673385, 0.00916501430473, 0.0101954446389, 0.0122130785319, 0.0120584022218, 
		0.0129368369709, 0.00880969723817, 0.00753763922685, 0.00749369201228, 0.00786313099136, 
		0.00897431063641, 0.00960684755591, 0.00975303967386, 0.00899421626885, 0.00771087614106, 
		0.00842513649762, 0.00817268458435, 0.00918811315422, 0.0100364163863, 0.0104684446716, 
		0.00935504407814, 0.00957346527698, 0.0133301318549, 0.0168573783847, 0.0188388838066, 
		0.0199083721752, 0.0162919959646, 0.0106342735297, 0.00945867770274, 0.00905723820097, 
		0.00859582896538, 0.0109592803472, 0.0156489669501, 0.0207012306648, 0.0233221026911, 
		0.0214679188967, 0.0141821736967, 0.00954809116335, 0.009708394808, 0.0101670412216, 
		0.0118156268879, 0.00997016932643, 0.00967522724121, 0.0081365750548, 0.00967088981902, 
		0.0109986415491, 0.0121565043715, 0.0124353390306, 0.00980515091228, 0.00877269027809, 
		0.00905253941068, 0.00877754953341, 0.00856385506862, 0.00705826258937, 0.00722731556999, 
		0.00675223207098, 0.00778505760361, 0.00802325420491, 0.00833941166406, 0.00880931480094, 
		0.00773189790433, 0.008411682463, 0.00879148610596, 0.00784478887382, 0.00831075951197, 
		0.0076592273134, 0.00720057333127, 0.00780870716183, 0.00806938658623, 0.00913793125948, 
		0.0108519127655, 0.0280997600549, 0.222779138255, 0.449941953338, 0.490873152867, 
		0.46553467609, 0.219336661337, 0.0484333688887, 0.0191597815511, 0.0102041277089, 
		0.00823152024452, 0.006039962504, 0.00598618329366, 0.0069343812289, 0.00795876772525, 
		0.00803582256167, 0.00807964154786, 0.00750932149785, 0.00756502315077, 0.00876166419878, 
		0.00902297949403, 0.00847243738687, 0.00733970444502, 0.00790744213255, 0.00762799983126, 
		0.00843080481603, 0.00762987656106, 0.00753621051733, 0.00665516030207, 0.00459724730087, 
		0.00556766615901, 0.00491444052075, 0.00456817282643, 0.0043307873196, 0.00430796077565, 
		0.00444629380396, 0.00522264025551, 0.00437906099698, 0.00443858808451, 0.00526802769291, 
		0.00565636794015, 0.00551291386749, 0.00518555168785, 0.00524206967138, 0.00549539103482, 
		0.00438732594776, 0.00412392336459, 0.00371872772105, 0.00351896953664, 0.00478861713535, 
		0.00490126689037, 0.00569813517704, 0.00649121494605, 0.0260885681539, 0.115854294344, 
		0.152704140624, 0.158879762037, 0.122073727882, 0.0342123491816, 0.00825989985205, 
		0.00560102236647, 0.00672950889069, 0.00742310284128, 0.00804057509158, 0.00823821441412, 
		0.00620852113636, 0.00466894647653, 0.00535423731861, 0.00470858154483, 0.00458564711695, 
		0.00537191372925, 0.00552314361412, 0.00608085899214, 0.00581079219421, 0.0041656031933, 
		0.00361681836291, 0.00461270141454, 0.00490491418962, 0.00710479680489, 0.00795721346848, 
		0.00614858472598, 0.00487297253578, 0.00291197161134, 0.00280886384863, 0.0025669011355, 
		0.00399454310219, 0.00590048795154, 0.00684432726286, 0.00778205877911, 0.00704132298322, 
		0.00677817790943, 0.00727386212924, 0.00753846862074, 0.00797373622915, 0.00667184234475, 
		0.00782795499073, 0.00760648551328, 0.00632489547823, 0.00632651694672, 0.00604935479632, 
		0.00689763371041, 0.00661410678083, 0.00504869557038, 0.00445556556911, 0.00457562895749, 
		0.00563596595125, 0.00433809645426, 0.00603113227234, 0.00485696939996, 0.00532477721637, 
		0.00518776910735, 0.00463921629665, 0.00518804815439, 0.00508413288001, 0.00571479495921, 
		0.00494911874081, 0.00380816989895, 0.00371927178848, 0.00363118804824, 0.00412614990914, 
		0.00532529332903, 0.00494113771593, 0.00464153542308, 0.00363069702828, 0.00401411984296, 
		0.00580099852298, 0.0100233184407, 0.0124628866555, 0.0140347074218, 0.0103475095363, 
		0.00586695375474, 0.00418934910029, 0.00293706686276, 0.00216503557395, 0.00265695335851, 
		0.00310507229154, 0.00411286071052, 0.00460268274817, 0.00543129168984, 0.00465986481787, 
		0.00405427604241, 0.00276530013086, 0.0025522051979, 0.00310986863833, 0.0039002597174, 
		0.00419329741983, 0.00482416038417, 0.00408352048492, 0.00314779190476, 0.00273181851405, 
		0.00331886294062, 0.00463594623326, 0.00476183526945, 0.00529397108561, 0.00364405116487, 
		0.00336898775128, 0.00398673976497, 0.00365078815273, 0.00305176191299, 0.00412394571112, 
		0.00359995738781, 0.00422653080297, 0.003002839273, 0.00302450954611, 0.00311542349218, 
		0.00474406938463, 0.0046206113126, 0.00546424648349, 0.00542797228686, 0.00430831598136, 
		0.00327293300647, 0.00272508529395, 0.00274711177176, 0.00271272461326, 0.00294827833864, 
		0.0033310247207, 0.00397126068617, 0.0041176459695, 0.00419111876473, 0.00373247261458, 
		0.00406723241293, 0.0062583126524, 0.0081005302961, 0.0098802394028, 0.00823493020471, 
		0.00703446117803, 0.00522354325861, 0.00903635162126, 0.0119157089967, 0.0108778450879, 
		0.0103793668869, 0.00562391326759, 0.00393689880665, 0.00394472371791, 0.0072249285015, 
		0.0107920259939, 0.0112200207024, 0.0105734687587, 0.00698019830405, 0.0035589147799, 
		0.00278212590691, 0.00376094930951, 0.00320972517525, 0.00333256280504, 0.00355700714362, 
		0.00227404577015, 0.00402873431877, 0.00565269759567, 0.00708475095595, 0.00750833013268, 
		0.00652083818845, 0.00541000004197, 0.00687584740638, 0.00787900103181, 0.016742110289, 
		0.0292255602546, 0.0357818017867, 0.0403554723692, 0.021869868042, 0.00968167377598, 
		0.0072018112198, 0.0085716846442, 0.00770837450145, 0.00719945607027, 0.00630187551773, 
		0.00597208264437, 0.00610493997082, 0.00657114644797, 0.00715964673423, 0.00671745449264, 
		0.00740561045268, 0.00732509418417, 0.00672268658114, 0.00690598259199, 0.00640270135398, 
		0.00621764327055, 0.00678018607935, 0.00836407449038, 0.0105319162933, 0.0231110452441, 
		0.0317333207976, 0.0346003017805, 0.0301860092672, 0.0169763782087, 0.00829672362248, 
		0.00581886181277, 0.0067062500603, 0.00791363043852, 0.00797362766143, 0.00829688961533, 
		0.00762726843846, 0.00674295125958, 0.00610083096965, 0.0063883652176, 0.00632793959182, 
		0.00612388152278, 0.00690334025923, 0.00828336844884, 0.00714387905796, 0.00691935219057, 
		0.00702271625232, 0.00681178578092, 0.00710725824251, 0.00693575133034, 0.00661057312967, 
		0.00765363789072, 0.00821844692861, 0.00827577806586, 0.00795941188453, 0.00698821445328, 
		0.00707716286755, 0.00824976552328, 0.010316933062, 0.0135597280582, 0.0196734196378, 
		0.020384087431, 0.0188076174989, 0.0160318014555, 0.00930317066866, 0.00866163213125, 
		0.00782787017182, 0.00674631167239, 0.0081080405872, 0.00980709423416, 0.0108408822439, 
		0.0119535731683, 0.0108964866889, 0.0104107889163, 0.0104780348853, 0.00911624741305, 
		0.0102447012751, 0.0229439136446, 0.144728138481, 0.240630321019, 0.255561922898, 
		0.234843371992, 0.0927760557097, 0.0193361587656, 0.00978996668505, 0.00953804148852, 
		0.0098248475785, 0.0091837961809, 0.00854533090143, 0.00792285984597, 0.00736399714219, 
		0.00776808580762, 0.00857694132005, 0.0108663508918, 0.00984293124001, 0.00912467192141, 
		0.0100458351666, 0.0111448004331, 0.0126158494079, 0.0125137280243, 0.0114074317566, 
		0.0114750169177, 0.0114201201999, 0.0108989124983, 0.00981955676492, 0.00886122399306, 
		0.00815099286969, 0.00957948545599, 0.00922294373025, 0.00877163372737, 0.00949557051067, 
		0.00932040674275, 0.00912705852872, 0.00909226741821, 0.00906214874083, 0.008552012049, 
		0.00933271795789, 0.00978127538857, 0.00855093791751, 0.00946245352915, 0.00905002586534, 
		0.0100318731699, 0.00990878404887, 0.00997257351313, 0.0101234231761, 0.00854917993412, 
		0.00844413168038, 0.00900305365792, 0.00872130408101, 0.00889253389891, 0.00959675731928, 
		0.00848548623562, 0.0090164846322, 0.0098033424191, 0.010105669716, 0.0093369453919, 
		0.00823424170425, 0.00830895157579, 0.00806101938624, 0.00797870222869, 0.00859536030986, 
		0.00922683675737, 0.0102379645756, 0.0114971316856, 0.0109390174326, 0.00996233262757, 
		0.0087237546336, 0.0086926550807, 0.00988929948246, 0.0104033319871, 0.0103699385021, 
		0.0137484967594, 0.062822686079, 0.143674671797, 0.17554283065, 0.187494281767, 
		0.104945262867, 0.0214477707138, 0.00976268326814, 0.00933925420829, 0.00986613786, 
		0.0096138719733, 0.0121538726166, 0.0192230279844, 0.0214384039712, 0.0242322016462, 
		0.0196677308295, 0.0134396966156, 0.0119584951102, 0.0148959500093, 0.0188296915811, 
		0.0180605974472, 0.018499940285, 0.0134831149416, 0.0109227912686, 0.0101337879461, 
		0.0107028886829, 0.0110240938997, 0.0106332896016, 0.00951463245416, 0.0102135779409, 
		0.0106385167684, 0.0101549069436, 0.00894094587142, 0.00886030968451, 0.00887507302065, 
		0.00921661119114, 0.00864764887707, 0.00882389377449, 0.00806594464772, 0.00903177744911, 
		0.00829861114423, 0.00770703355845, 0.00895549497187, 0.00914930178468, 0.0102395434151, 
		0.0100475261562, 0.00985512477436, 0.0114101422046, 0.0116773020842, 0.0117237187413, 
		0.00967193474865, 0.0100337189863, 0.01146825463, 0.0121431329554, 0.0111034885098, 
		0.0115193819918, 0.011545673592, 0.0115612520233, 0.0113939531515, 0.00975191704183, 
		0.00847796461832, 0.0111972518686, 0.0126130098864, 0.0128438901148, 0.015010729315, 
		0.0207955855314, 0.0236544560467, 0.0232434230576, 0.0185366584146, 0.0116985796362, 
		0.0127323956657, 0.0263319346773, 0.0618363105289, 0.0766663981384, 0.0835673061471, 
		0.0640240963273, 0.0237194629701, 0.0134044332146, 0.0112109152776, 0.00997307740249, 
		0.0111027410993, 0.0146510878408, 0.0149691774842, 0.0149979778292, 0.0127426874057, 
		0.00994426530439, 0.0102509210976, 0.00984963691651, 0.0101940227362, 0.00928823740459, 
		0.00874659597658, 0.0113448369484, 0.0117705625857, 0.0109955194462, 0.010888540001, 
		0.014419169132, 0.0229941070788, 0.0281255231964, 0.031004421516, 0.0439689431465, 
		0.0793241606539, 0.0865135446829, 0.0852084036319, 0.0564254143394, 0.0182556947598, 
		0.00944639822617, 0.00837563953186, 0.00895396302755, 0.00993730878066, 0.0102385844778, 
		0.00998448817432, 0.00881718282187, 0.0103739312106, 0.0128259416063, 0.0137176650105, 
		0.0131645647681, 0.0100157869648, 0.00825848673303, 0.00992553455249, 0.0110195220099, 
		0.0117826302979, 0.0110969390112, 0.00825994855228, 0.00838813701587, 0.0100587331692, 
		0.00997021823224, 0.0108535960481, 0.0113398711487, 0.0107842830259, 0.0122087882653, 
		0.014299396051, 0.0151157793702, 0.0134179484162, 0.0117956917807, 0.0095877425872, 
		0.00944434275346, 0.0109012753146, 0.0108969413149, 0.0112546862162, 0.00850521227726, 
		0.00803586997197, 0.0112815518576, 0.0120009015718, 0.0116582871226, 0.0109321484221, 
		0.00789622373154, 0.00870594563795, 0.00969329186379, 0.0106268603398, 0.00944275606067, 
		0.00838619342218, 0.00748493526138, 0.00661452673708, 0.00851288154451, 0.00973305023237, 
		0.0117488780886, 0.0197832847655, 0.021468940451, 0.0222339081866, 0.022253105979, 
		0.0290280475007, 0.0915839802187, 0.134305269263, 0.137835626499, 0.119521253928, 
		0.0492368823033, 0.0157674078424, 0.0148316779724, 0.0261101832688, 0.0331436661294, 
		0.0347076138401, 0.0319071742623, 0.0189158965652, 0.0126040438697, 0.0106680055916, 
		0.00776356852534, 0.00596330418306, 0.00668244715151, 0.0085330923723, 0.00782865398483, 
		0.00723914730666, 0.00590731217543, 0.00433369508485, 0.0045876554488, 0.00473344504169, 
		0.00578278110287, 0.00649402436391, 0.00715453303367, 0.00573302610463, 0.00539218037941, 
		0.0063039259977, 0.00603656379778, 0.00575319860472, 0.00577906206766, 0.00560823337816, 
		0.00588019077029, 0.00587371598613, 0.00670614191743, 0.00670650024732, 0.00630102746069, 
		0.00496402773967, 0.00372258325963, 0.00453020379216, 0.00469239392416, 0.00572045238088, 
		0.00669959870726, 0.00549488646512, 0.0053316398142, 0.00548230968604, 0.00560380134819, 
		0.00586070335621, 0.00511919876808, 0.00594614321985, 0.00446111648169, 0.00360983055375, 
		0.00584740108445, 0.0139608955918, 0.0155656869698, 0.0164489168314, 0.0118165812587, 
		0.0059518475845, 0.00508317062924, 0.00471445476261, 0.00525568377433, 0.00492728060786, 
		0.0052867626276, 0.00436655973851, 0.00390962635282, 0.00418821974932, 0.00334474855204, 
		0.00442746826237, 0.00698158904056, 0.0147055927967, 0.0187491072955, 0.0190248182202, 
		0.0149071300114, 0.00669869691029, 0.00433501590551, 0.00399756358705, 0.00424383909995, 
		0.00550998110009, 0.00521382025301, 0.00511033003697, 0.0046693091389, 0.00422460714178, 
		0.00403090388647, 0.0047141988625, 0.00824089972618, 0.0206398042442, 0.0288793785219, 
		0.0339019148014, 0.0324164890752, 0.0146498805614, 0.00583552133165, 0.00540012295288, 
		0.00488962151949, 0.00555242355795, 0.00621215573931, 0.00706475769417, 0.00680773149656, 
		0.00828410280374, 0.0119761894806, 0.017883201055, 0.0240302308657, 0.0278316773481, 
		0.0298270046741, 0.0295053699794, 0.0297155545325, 0.0291550600259, 0.0298567565272, 
		0.0317625794549, 0.0329177280065, 0.0323269826858, 0.030646733677, 0.0277406444929, 
		0.0286762605969, 0.0281423869714, 0.0278771502667, 0.027943143458, 0.0254690199215, 
		0.0234388062338, 0.0229894972374, 0.023491426841, 0.0248308386803, 0.0250736043431, 
		0.0238362954425, 0.0214580669328, 0.0193593127618, 0.0198557117373, 0.0212855032993, 
		0.0227083517367, 0.0226617203179, 0.0215234221101, 0.0190919292225, 0.0176118097956, 
		0.0188609096896, 0.0175349464235, 0.0209825078544, 0.0213144239123, 0.0211055443584, 
		0.0230991848655, 0.0187005061008, 0.0224217661661, 0.0221554401948, 0.0260064836821, 
		0.0269555885977, 0.0255448214219, 0.023894868576, 0.0177542029126, 0.0176838246051, 
		0.0216051234161, 0.0256151900852, 0.0425708377283, 0.0470240655841, 0.0477737980823, 
		0.0445875176462, 0.0298615678798, 0.0248822713984, 0.0207752304767, 0.0168388245758, 
		0.0184323659983, 0.0212423367201, 0.017948205462, 0.0187524723798, 0.0168957031632, 
		0.0140090015858, 0.0152319276349, 0.0172842913132, 0.0186977751476, 0.0188098054491, 
		0.019988697533, 0.0171184542442, 0.0139988079165, 0.0172651645493, 0.0166797216214, 
		0.0193129906272, 0.0222160400706, 0.0221974734579, 0.0208526609261, 0.019269094995, 
		0.017858305088, 0.0167840934804, 0.0173898290031, 0.0184170704371, 0.0210552956131, 
		0.0208156797972, 0.020818664041, 0.0205854534489, 0.0171810823627, 0.015630709132, 
		0.0163160985216, 0.0164908636598, 0.0205168377952, 0.0199222577638, 0.0235010959592, 
		0.0191080832582, 0.0170709075454, 0.0175232402221, 0.0162672838367, 0.0170212046976, 
		0.0200102239695, 0.0217059123581, 0.0219507528551, 0.0213914413816, 0.0183804505565, 
		0.0177414082666, 0.0167580944944, 0.0165929928253, 0.0233224145138, 0.0651416017288, 
		0.129263166392, 0.184571927427, 0.212388144342, 0.110621544436, 0.0396704636493, 
		0.021474642162, 0.0168464035298, 0.0193328712132, 0.0185468272687, 0.0196975067461, 
		0.0171938507891, 0.0143466032418, 0.0152542642013, 0.0160193150889, 0.0155934929558, 
		0.0183244697665, 0.017323138045, 0.017614277163, 0.0163534144683, 0.0122310454335, 
		0.0118863589585, 0.0115735101249, 0.0118955795093, 0.015984625469, 0.018450629033, 
		0.0176618938169, 0.0164042927109, 0.0146176356715, 0.0127304585951, 0.0128237649645, 
		0.0129727505408, 0.0150363775664, 0.0175882320739, 0.0179548271907, 0.0177091666884, 
		0.0156446379336, 0.0127630671518, 0.0113747535652, 0.0128442367407, 0.0110386009239, 
		0.0153229998474, 0.0185485495743, 0.0186364671564, 0.0194082367969, 0.0159371845574, 
		0.0136219566648, 0.0138755722487, 0.0120013326928, 0.0130776654759, 0.0150594702893, 
		0.0164388916387, 0.017678019715, 0.0156763253848, 0.0139397307773, 0.0122598499993, 
		0.0112749825128, 0.0117947169407, 0.0115480276887, 0.0155666740485, 0.0162136944764, 
		0.0158963574536, 0.0159573739108, 0.0182953424777, 0.0194957071453, 0.0199439732291, 
		0.0160710629945, 0.0114787708483, 0.0139716329967, 0.0158274714566, 0.0169267123676, 
		0.0147617716385, 0.0102541892832, 0.00879230848942, 0.00917025469012, 0.00974997620756, 
		0.0115195204608, 0.0144317109682, 0.0141286946011, 0.0138748957199, 0.0124307105816, 
		0.0091353146471, 0.00858381551574, 0.00869446722916, 0.0067920436397, 0.0101136354965, 
		0.0128097382247, 0.0141140303676, 0.0144962049846, 0.0117750976188, 0.0092967743868, 
		0.00889674652912, 0.00891105218056, 0.00849077985107, 0.0100750634593, 0.0127967782776, 
		0.0137164773099, 0.0134814670843, 0.0102564933486, 0.00789359285215, 0.00733090114879, 
		0.00708822002278, 0.0083284490209, 0.0106471241538, 0.0142353988823, 0.013929293509, 
		0.013349099503, 0.010490743541, 0.00816564744805, 0.00760865816977, 0.00658994162786, 
		0.00773184029772, 0.00825845797424, 0.0111408413853, 0.0123480771293, 0.0136528388893, 
		0.0125659177917, 0.00927846903757, 0.00693702925156, 0.00689048455757, 0.0077675918512, 
		0.00861780272398, 0.0116636079944, 0.0122963962658, 0.0118202365904, 0.0128006202017, 
		0.0112199207935, 0.010902426025, 0.010510470757, 0.00871518671571, 0.00861253931269, 
		0.0102250732033, 0.0134247149209, 0.0146578951081, 0.0141210411994, 0.0105373342601, 
		0.00905040774151, 0.00928314692404, 0.0115526012503, 0.011989596099, 0.0125358450321, 
		0.0154121635357, 0.0135210547575, 0.0133222023432, 0.0103174665486, 0.00819220066573, 
		0.00972474039238, 0.0115300009944, 0.0108830923044, 0.0109294841964, 0.0114866558603, 
		0.0102337127287, 0.0113100915153, 0.0117206937424, 0.00980234820413, 0.00833895786716, 
		0.00823450003766, 0.00920323105796, 0.00961628970434, 0.0196792082256, 0.0433347522114, 
		0.0531690870174, 0.0575333503105, 0.0420266845448, 0.0122550649213, 0.00763942364958, 
		0.00698230899565, 0.00726004608777, 0.00830470284147, 0.0113162274462, 0.0118099955096, 
		0.0121568211365, 0.0114448902858, 0.00900794993518, 0.00627166538904, 0.00609565236341, 
		0.00570962945233, 0.00693430316512, 0.00892512725233, 0.0123226605627, 0.0130463585305, 
		0.0128533863794, 0.0106975131736, 0.00733753075871, 0.00667321310257, 0.00690307831681, 
		0.00718199907969, 0.010013688695, 0.0146456569674, 0.0204332410028, 0.0208699000711, 
		0.0180024407609, 0.0141528733465, 0.00789382161743, 0.00649382826399, 0.00732963691598, 
		0.00803036808852, 0.00829772166204, 0.00984147141631, 0.0126111814225, 0.0366813866225, 
		0.134162708813, 0.167579391624, 0.168284731268, 0.134664610382, 0.0369198934946, 
		0.00995271534243, 0.0085080547328, 0.010386854434, 0.0147665751303, 0.0170577508239, 
		0.0218466704809, 0.0226617186398, 0.0222904144045, 0.0281903082071, 0.03353616735, 
		0.0318821059766, 0.0281596791244, 0.0221116388341, 0.020186961639, 0.0208223226684, 
		0.0200093346354, 0.019450451477, 0.0180589459178, 0.0183362345925, 0.0172183632072, 
		0.0168602497075, 0.0167025912362, 0.0159266680264, 0.0168079270638, 0.0186209120511, 
		0.0186402678202, 0.0165426889106, 0.0149215113459, 0.0184527893772, 0.0363013378045, 
		0.0396448582992, 0.0433652631815, 0.0370523129742, 0.024349190235, 0.0161247306049, 
		0.0147832343013, 0.0124581263981, 0.0100235524544, 0.0119787968556, 0.0110531860011, 
		0.0131443760539, 0.0122366190913, 0.0112481794889, 0.0125231127159, 0.0103873734872, 
		0.0106976810656, 0.0110135056149, 0.00867943257098, 0.00995197453204, 0.00990797471686, 
		0.00769543109722, 0.00875665308495, 0.0118558257857, 0.0123854959905, 0.0153555255127, 
		0.0164948946005, 0.0121792485719, 0.0106066624365, 0.00929154100488, 0.00597056301065, 
		0.00612206258405, 0.00776030469159, 0.00718322365243, 0.0167415316, 0.0358761274781, 
		0.0430252417137, 0.0475181886067, 0.0357224577541, 0.0113573998909, 0.00710321671237, 
		0.00646053915271, 0.00874248830534, 0.00881389343199, 0.0076865078472, 0.00921228939062, 
		0.0135456693414, 0.0178582978044, 0.0194012956336, 0.0186046729684, 0.0153426038969, 
		0.0112097035107, 0.01052461974, 0.00957741129614, 0.0087168514186, 0.00787126199031, 
		0.00969012536391, 0.0102306523759, 0.0127905628915, 0.0123365584571, 0.0117541161911, 
		0.0106160529647, 0.00709801701059, 0.00708893899436, 0.00732417369931, 0.00624315998064, 
		0.00873600969284, 0.0105211191363, 0.0116872075023, 0.0123110747329, 0.0302099837791, 
		0.0899425665075, 0.105143763497, 0.107067555953, 0.0841875375714, 0.0261458613541, 
		0.0106192349485, 0.0120194421941, 0.012963035634, 0.0137912642452, 0.0677503241681, 
		0.38007045948, 0.523230888051, 0.537258100188, 0.475030950244, 0.148494570972, 
		0.0225413812293, 0.00959974125502, 0.00751808998504, 0.00778884719662, 0.00773553388051, 
		0.00833245125538, 0.00839703833372, 0.00884768504845, 0.00910467214899, 0.00930840738696, 
		0.00471627198773, 0.00532602708588, 0.00765047534799, 0.00983388850973, 0.00931400707656, 
		0.00924990399771, 0.00685886473507, 0.00575295823816, 0.00538828924099, 0.00345980242465, 
		0.00390738220871, 0.00389884521278, 0.0039505472284, 0.0051047842943, 0.00876368422746, 
		0.00817947971147, 0.00696268109364, 0.00561591147246, 0.00332534548288, 0.00368255821903, 
		0.00347924107785, 0.0025067033758, 0.00239119173931, 0.00523450198871, 0.00602377937838, 
		0.00618076814616, 0.0057090352102, 0.00459019713123, 0.00552319356164, 0.00502239098625, 
		0.00452965459024, 0.00428385597336, 0.00701867640937, 0.0071788474487, 0.00791092408398, 
		0.00629114810963, 0.00627492236734, 0.00605068962374, 0.00546937699755, 0.0052247282176, 
		0.00516666634682, 0.00765192212761, 0.00761485814878, 0.00703477026505, 0.00565663015643, 
		0.0049555132708, 0.00504534967236, 0.00594594898077, 0.0055950782358, 0.00571189762175, 
		0.00719747991174, 0.00687229572154, 0.0073429781072, 0.00736024283929, 0.00556685487338, 
		0.00464570708225, 0.00440246873105, 0.00431336155978, 0.00511070028008, 0.00720091965237, 
		0.00787967653634, 0.00744990164167, 0.00687994145175, 0.00391051964795, 0.00329955830623, 
		0.00362375778259, 0.00317224141889, 0.0051544670741, 0.00673791231482, 0.00826804256435, 
		0.0101323070829, 0.0103329274615, 0.00907098537604, 0.00723015897765, 0.00556371565418, 
		0.00600570818959, 0.00542700772279, 0.00621289949988, 0.00783434814771, 0.00718869738244, 
		0.0116734748773, 0.0147898558995, 0.0136109674597, 0.0141918490477, 0.0106601102327, 
		0.00843868948772, 0.00585121490192, 0.00772183864844, 0.00799731969759, 0.00784867895194, 
		0.00829779259139, 0.0070169628005, 0.00618815626525, 0.00593031084664, 0.00618674623897, 
		0.00770091936787, 0.00913241316176, 0.00985034836094, 0.0108044272731, 0.0111056703402, 
		0.00935721788679, 0.0077500311828, 0.0083820308688, 0.00958421961943, 0.0113262311189, 
		0.023121469311, 0.0571525422167, 0.0844912844189, 0.0977582711683, 0.101557704931, 
		0.0769284158009, 0.0627919876731, 0.0540717514984, 0.0490886706293, 0.0435962762808, 
		0.042917035871, 0.04064412643, 0.0438710980369, 0.0408054230763, 0.0389290660518, 
		0.0373606700823, 0.0311568370576, 0.0398910175524, 0.0554485881146, 0.0626163361141, 
		0.0724051825101, 0.0728394700515, 0.046271466657, 0.0313486361691, 0.0286732812908, 
		0.0264542518592, 0.0252200312146, 0.0254053270216, 0.0236593196193, 0.0221901593826, 
		0.0268664848433, 0.0290818073899, 0.0329400589042, 0.0317954588849, 0.0269842442352, 
		0.0229992020581, 0.0213453582791, 0.0214671275053, 0.0190621092126, 0.017069564655, 
		0.017405718487, 0.0198799795802, 0.0206190812822, 0.0187705694576, 0.0184753610426, 
		0.0196881444635, 0.019050779128, 0.0158189633403, 0.016050655116, 0.0147435957532, 
		0.0172714893255, 0.0166767113483, 0.0155920327616, 0.0157088483277, 0.0150847784097, 
		0.0161758562902, 0.0156453989344, 0.0117638812001, 0.0127828023693, 0.0138182382831, 
		0.014427079219, 0.0161011608978, 0.0148441227599, 0.0117081509357, 0.0133730828904, 
		0.0131588300485, 0.0144286523106, 0.0139654432518, 0.0104876525837, 0.0111929820211, 
		0.0116004181512, 0.01133372604, 0.0136540169775, 0.0140454189401, 0.0125936575117, 
		0.0137547849136, 0.0164872414706, 0.0217578198866, 0.022853058347, 0.0220408440394, 
		0.015609668713, 0.0104155807489, 0.0108869144649, 0.0115371430906, 0.0139938101055, 
		0.0157089186651, 0.0159460460927, 0.0114549251626, 0.0102804160718, 0.00877952144986, 
		0.00962030432367, 0.00922573137165, 0.0115628491111, 0.0111686549837, 0.0134742864927, 
		0.0152405322282, 0.0149732320959, 0.0144400671899, 0.0152865138809, 0.0137669008826, 
		0.0123529592516, 0.0121969907922, 0.0101906825934, 0.00955556299696, 0.011566337766, 
		0.014432975015, 0.0159969468926, 0.014068714187, 0.0122426826531, 0.00894633641593, 
		0.0108483493297, 0.0178576957541, 0.023306584943, 0.0292602693479, 0.0330356616922, 
		0.0335715139094, 0.035418035537, 0.0338081259718, 0.0339050709243, 0.0330659730696, 
		0.0321501375915, 0.0314188662989, 0.0304261316083, 0.0312208494059, 0.031463700565, 
		0.0302436083299, 0.0298938001495, 0.0316260261659, 0.0297953005963, 0.0291903645372, 
		0.0298459078317, 0.0262244726709, 0.0308476559253, 0.0261836272822, 0.0282741618789, 
		0.0308337674954, 0.0243303749383, 0.0306823711352, 0.0308156920567, 0.0265391117676, 
		0.0316592993361, 0.0296471564661, 0.023299051128, 0.0258804583121, 0.0264537704042, 
		0.0222883891266, 0.0245956182802, 0.030031866952, 0.026141546574, 0.0249286115152, 
		0.0258175178417, 0.0250225249991, 0.0229124304741, 0.0230681447204, 0.0247743225102, 
		0.0222055641882, 0.022013090616, 0.0226922141073, 0.0225435783991, 0.0214233883338, 
		0.0240383786228, 0.0245543389514, 0.0232405113356, 0.0230288749405, 0.0218559230698, 
		0.0197171794133, 0.0196780093162, 0.0197881708619, 0.0207225038655, 0.022424170952, 
		0.02009834256, 0.0246332124056, 0.0280547892415, 0.0694171740445, 0.135264985944, 
		0.161876458478, 0.169615082821, 0.112720999356, 0.0360245720218, 0.0177923164479, 
		0.0208898947055, 0.021705360798, 0.020823961502, 0.0176908138069, 0.0160901382114, 
		0.0207695861667, 0.0208297100703, 0.0200870084273, 0.0173491392474, 0.0144405105022, 
		0.0200558983177, 0.02049339169, 0.0196608718709, 0.0161199200422, 0.0131873334214, 
		0.0199638244933, 0.0212633788307, 0.021502263484, 0.0184944342272, 0.0131286811116, 
		0.0179699569934, 0.0192345916133, 0.019010983394, 0.0170085670913, 0.0110887973537, 
		0.0130795121205, 0.0193855948712, 0.0204487092371, 0.0225128362376, 0.0171647447806, 
		0.0120548368569, 0.0146562465655, 0.0166501798459, 0.0174631311067, 0.0173738250019, 
		0.0106583125867, 0.00793143944077, 0.013633019104, 0.0199255684163, 0.0209457615452, 
		0.0200250568094, 0.0131035040397, 0.00811751946685, 0.0134915169365, 0.0169020662063, 
		0.0315882695809, 0.0378091136521, 0.0296633876915, 0.0256535832267, 0.0200218340949, 
		0.0199656631955, 0.0204074337867, 0.0186804185956, 0.00923013808605, 0.00477228142318, 
		0.00822686076306, 0.012498777345, 0.0130695841492, 0.013750193469, 0.00995651749534, 
		0.00775844266539, 0.0108727362172, 0.0166015852721, 0.0190104440058, 0.0178693807699, 
		0.0137070433883, 0.00800028438379, 0.00638384301299, 0.0212924292706, 0.108410123815, 
		0.144223138015, 0.153791663658, 0.133657166628, 0.047536745289, 0.0123255277579, 
		0.00916547432533, 0.0117060069511, 0.0116904914361, 0.0103937421736, 0.00644789182436, 
		0.00278273337226, 0.00155378667614, 0.00744197451785, 0.0131684340574, 0.012913918415, 
		0.0128256026431, 0.00867841865248, 0.00344014166167, 0.00337072665366, 0.00722717453786, 
		0.00981508775033, 0.00979967778119, 0.00756301769533, 0.0047316394911, 0.00395742559757, 
		0.00646091072888, 0.00821128588288, 0.0111702931246, 0.0107077161555, 0.00947591878591, 
		0.00947793249144, 0.00641694098273, 0.00609823236514, 0.0190638381076, 0.0410197232503, 
		0.0520132071004, 0.0591090633433, 0.0449332633709, 0.0142771624745, 0.00704172752469, 
		0.00411331700778, 0.00531590042311, 0.00842765159346, 0.0101092760393, 0.00952571831219, 
		0.0068323269295, 0.00331097767557, 0.00132865070424, 0.00338916696234, 0.00855174844137, 
		0.0123327152559, 0.0136489946218, 0.0114782586141, 0.00670230766536, 0.00244519834391, 
		0.00243954023189, 0.00285917982554, 0.00416799526, 0.013004557925, 0.0342082698407, 
		0.0428696383352, 0.0432135240313, 0.0384041380901, 0.0170723509351, 0.00812275154082, 
		0.00429252206431, 0.00645022702001, 0.00791620330581, 0.00838464027863, 0.00799954328729, 
		0.00514204457882, 0.003484258652, 0.00244655720116, 0.00332790759342, 0.00874971550261, 
		0.0109926511147, 0.0113523893444, 0.010716484858, 0.00492186853864, 0.00388817422004, 
		0.00427198716015, 0.00250108863772, 0.00356408984141, 0.00462660483536, 0.00560032547643, 
		0.00423668804438, 0.00612013829019, 0.00611487995585, 0.00862624338902, 0.00972089293951, 
		0.0162167324549, 0.027341994015, 0.0296139317235, 0.0290464860791, 0.0211915515745, 
		0.00829680738223, 0.00410441566109, 0.00512230334077, 0.0037183421625, 0.00407753455673, 
		0.0077019890543, 0.0108289655142, 0.0106064530326, 0.0114169870599, 0.00759718278969, 
		0.00619572590371, 0.00694226111694, 0.00642240842054, 0.00723706019298, 0.00847710353525, 
		0.00931238741164, 0.00916103698551, 0.00878275391038, 0.00742270443765, 0.00991443680375, 
		0.0107944949386, 0.012002107031, 0.0106095545775, 0.00840530905728, 0.00884069771694, 
		0.00861838112786, 0.00860701282557, 0.00716313880806, 0.00586761247436, 0.00622142663942, 
		0.00456992641272, 0.00565878559775, 0.00748104012542, 0.0110123613235, 0.0125657959656, 
		0.0121127246609, 0.012802085271, 0.010382865642, 0.0112937550023, 0.0105833097547, 
		0.00868613102063, 0.00695625160089, 0.0064922808043, 0.00792939844159, 0.00694700047967, 
		0.0074396790529, 0.0076617595243, 0.00934354485202, 0.00903411012898, 0.00930991389048, 
		0.0110234166506, 0.017792597016, 0.0345855493123, 0.0417084867857, 0.03970614537, 
		0.0315404044305, 0.0141085405973, 0.00619019273965, 0.00335730411557, 0.00368071169302, 
		0.00470263921009, 0.00684024944021, 0.00940902672048, 0.0112632942731, 0.0106817061118, 
		0.00758621666977, 0.00644600359522, 0.00520291673752, 0.00451152469897, 0.00547899510058, 
		0.00638902288738, 0.00621955986189, 0.00760862896814, 0.00689444878918, 0.00703643893808, 
		0.00802045231274, 0.0121828978581, 0.0143330144337, 0.0151149860532, 0.0128309885779, 
		0.00800638804812, 0.00589713222699, 0.00600812178394, 0.00655989507056, 0.00767278724433, 
		0.00808270892971, 0.00742758231688, 0.00697341686782, 0.00593217597803, 0.00598840108344, 
		0.00731045761806, 0.0101646935693, 0.0113552722467, 0.0132064940054, 0.0110300149117, 
		0.00950954430468, 0.00956914550592, 0.010153989793, 0.0103567267739, 0.00884128229214, 
		0.00611087829425, 0.00670207722151, 0.00763182823049, 0.0113978699499, 0.0129754950473, 
		0.0135594492369, 0.0120421763399, 0.0094138369125, 0.00887775628595, 0.00771263527666, 
		0.00576068046707, 0.00603593129064, 0.00609644371409, 0.00573242825153, 0.00729778071015, 
		0.00635997096375, 0.00731023477739, 0.00587096335432, 0.00532835619095, 0.00515931389001, 
		0.00621787398326, 0.0079136472151, 0.00964809328538, 0.00828300871262, 0.00857618383913, 
		0.00688253212361, 0.00638788875181, 0.00567778054146, 0.00665053519212, 0.00605105282948, 
		0.00587622781605, 0.00601395973243, 0.00653360734699, 0.00462942750991, 0.00455245383327, 
		0.00509348455325, 0.00643771703762, 0.00911019776089, 0.0100021581735, 0.00964115978922, 
		0.00808739945024, 0.00564159162407, 0.00386570172746, 0.00355383891614, 0.0035904600265, 
		0.00447578371125, 0.00589366043138, 0.00586287873427, 0.00635233606679, 0.00545917626876, 
		0.00525251479132, 0.00518641036936, 0.00431785870168, 0.00671931616009, 0.00774793547637, 
		0.00815856947547, 0.00833275833627, 0.00590843075402, 0.00492043257691, 0.00549216447762, 
		0.00527729346142, 0.00571276307382, 0.00566296622864, 0.00509145315041, 0.00407316714672, 
		0.00397294806027, 0.00430098019065, 0.00541097782583, 0.005007292687, 0.00646269519314, 
		0.00703239656131, 0.00805025958484, 0.00882791722782, 0.00641296017495, 0.00579492893455, 
		0.00521104356382, 0.00395643626449, 0.00494693749994, 0.00497143653228, 0.00367183978122, 
		0.00439084981263, 0.00361955534181, 0.00412508579302, 0.0049706674484, 0.00520668444824, 
		0.00692997840269, 0.00790947674051, 0.00762722081076, 0.00707533462204, 0.00573413556408, 
		0.00351077194163, 0.00474635771012, 0.00503126486572, 0.00533432843312, 0.0052906883019, 
		0.00548978010752, 0.00432331735249, 0.00526166674323, 0.00755761375078, 0.00801615981671, 
		0.00930197184044, 0.00964320542244, 0.00694000447026, 0.00755923394335, 0.00811081266765, 
		0.0071918714292, 0.00576070547599, 0.00437632365759, 0.00412492938548, 0.0034933197432, 
		0.00378266436522, 0.00387238054366, 0.00451360385037, 0.00447323300048, 0.00421148810505, 
		0.00367081910142, 0.00296883118507, 0.00342846406562, 0.003867413054, 0.00471811768242, 
		0.00733708785483, 0.00716294358964, 0.00818526563197, 0.00705426301815, 0.00484057879756, 
		0.00354662000685, 0.00347376591049, 0.00387945113487, 0.00329180508124, 0.00380071268541, 
		0.00350532059897, 0.00417560573944, 0.0147842237668, 0.0249709216786, 0.0272817094167, 
		0.0252804357919, 0.0155151824653, 0.00662505727505, 0.00540232951306, 0.00489514718329, 
		0.00533917054418, 0.00360696776148, 0.00454006074847, 0.00367667684264, 0.00455636319032, 
		0.00410570438291, 0.00300168841294, 0.00218474705987, 0.00254787740861, 0.00345020621885, 
		0.00415881451465, 0.00388077311949, 0.00508616913037, 0.00532080966223, 0.00635121367242, 
		0.0112098731579, 0.0118361961764, 0.0120735995217, 0.0107689769035, 0.00638267968135, 
		0.00576782743224, 0.00587216038376, 0.00506919407653, 0.00496961902578, 0.00400967995474, 
		0.00398543354885, 0.0035846749435, 0.00393086003793, 0.00345759132526, 0.00299591625139, 
		0.00284649800419, 0.00307660213098, 0.00423923116035, 0.00420770832874, 0.00422746402175, 
		0.00414947711417, 0.00347674072087, 0.00175276917135, 0.00189465037183, 0.00113667518374, 
		0.000259889890361, 0.000459746673902, 0.00107148693679, 0.00153084012126, 0.00276113806546, 
		0.00267704029097, 0.00234826187357, 0.00171952234751, 0.000852833556832, 0.000912003097583, 
		0.00441734601683, 0.0159310079885, 0.0209395934429, 0.0216892127667, 0.0184572342373, 
		0.00684494754385, 0.00193694094996, 0.00145202494576, 0.00169711388117, 0.00164526650268, 
		0.00180546185565, 0.00279385434376, 0.00255638320938, 0.00235707569475, 0.00192582480075, 
		0.0016850224121, 0.00110602209644, 0.00106200517434, 0.000866946253039, 0.00306903654007, 
		0.00288911842003, 0.004639257661, 0.00959222298133, 0.0187787685035, 0.0267243982691, 
		0.0307360892254, 0.029231235258, 0.0235717178069, 0.0181274419319, 0.0181257049878, 
		0.0185084163278, 0.0183190297371, 0.0184892152592, 0.0179996877762, 0.0134181083231, 
		0.0122597543275, 0.0135920850908, 0.0120920709506, 0.0125164154441, 0.0120377673942, 
		0.00867364295489, 0.0104484496325, 0.00914479504891, 0.0071822841092, 0.00804116583134, 
		0.00887302725889, 0.00695628475472, 0.00732907460558, 0.00793424965086, 0.00731470932195, 
		0.00599655706653, 0.00629308993045, 0.00679603137486, 0.00587862286243, 0.00548291855299, 
		0.00586888309744, 0.00654961107479, 0.00687269683569, 0.00766614686019, 0.00775172954421, 
		0.00600939822561, 0.0053975576271, 0.00372137910085, 0.00433263738524, 0.00345273799298, 
		0.00291436968368, 0.00350540328799, 0.00701377110448, 0.00991852632425, 0.0108104379206, 
		0.0117417948161, 0.00925517925805, 0.00634761578465, 0.00297346093098, 0.00215075895438, 
		0.00285073588595, 0.00406531595555, 0.00388884485305, 0.00320190273702, 0.00213104470532, 
		0.00133209374229, 0.00216600284706, 0.00310797290326, 0.00220481868789, 0.000934454911053, 
		0.000269662555626, 0.000322188596316, 0.000697594343476, 0.00126659215823, 0.00226992532907, 
		0.00173328739426, 0.00160830905999, 0.0024155189623, 0.00375600217087, 0.00396427238581, 
		0.00441757926928, 0.00529209458293, 0.00404200458282, 0.00401687745792, 0.00380849115821, 
		0.00263492705832, 0.00242984395312, 0.00156744324739, 0.00117431152057, 0.00180911352053, 
		0.00255913997367, 0.00198658150294, 0.0027020393112, 0.00210854780208, 0.00152901032008, 
		0.00181191826276, 0.00254137854486, 0.00254855317125, 0.00282246142911, 0.00223141799188, 
		0.0024312662358, 0.00356219105348, 0.0102347032705, 0.0402351262722, 0.0509610578865, 
		0.0519252494666, 0.0449463475654, 0.0147663921169, 0.00220955419908, 0.00188513683963, 
		0.00188722266917, 0.00225952583135, 0.00249060796825, 0.00162169780502, 0.00111009945407, 
		0.00118435153473, 0.00360886643863, 0.00406011316848, 0.00504212120875, 0.0051982879455, 
		0.00598032059691, 0.00673411315975, 0.00885542307573, 0.00991415104792, 0.00970337638163, 
		0.00912995474662, 0.0090713993504, 0.00824192346277, 0.00943851102165, 0.0113970964891, 
		0.0128940784405, 0.012467220957, 0.0121918772355, 0.00932764245866, 0.00871384948129, 
		0.00863830304211, 0.00804464153129, 0.00814452835637]

		#well that was the reference order 91 (normalised)

		#xcheck to make sure we're working on the right order.
		#need to check data sample form each year to make sure that we can just run through this.
		corrs=np.ones(5)
		refind=20 #usually absord 91
		for i in [0,1,2,3,4]:
			corrs[i]=np.argmax(signal.fftconvolve(refid,hdu[refind-2+i].data[0]/np.max(hdu[refind-2+i].data[0])-np.min(hdu[refind-2+i].data[0]/np.max(hdu[refind-2+i].data[0])),mode='same'))

		#plot only best matching spectra over each other for x-axis check
		plt.plot(refid[::-1])
		i=np.argmax(corrs)
		plt.plot(hdu[refind-2+i].data[0]/np.max(hdu[refind-2+i].data[0])-np.min(hdu[refind-2+i].data[0]/np.max(hdu[refind-2+i].data[0])))

		return np.argmax(corrs)-2#this is the relative shift in the order numbers

	#linelist from MMurphy06
	linelist=[3033.508059,3035.110311,3035.537696,3038.824635,3039.668854,3041.940344,
	3043.065282,3043.930019,3045.068171,3046.951282,3048.233093,3049.092387,3049.862412,
	3050.815888,3050.984837,3051.792888,3052.128938,3056.844532,3058.028894,3058.426284,
	3060.438957,3060.905473,3065.683758,3065.930013,3066.236272,3066.412051,3067.729409,
	3070.816328,3072.115012,3072.825235,3073.80395,3075.056529,3075.840368,3077.339066,
	3077.717166,3077.931848,3079.573497,3079.88746,3080.217043,3081.032158,3081.981001,
	3082.504712,3083.297373,3085.025579,3085.472334,3086.56672,3093.401536,3098.726877,
	3100.938252,3101.557049,3107.026136,3107.346774,3108.296793,3110.020904,3111.280689,
	3112.089063,3117.68401,3120.880842,3123.158077,3124.387391,3125.209127,3126.053162,
	3127.208241,3129.974056,3132.103167,3133.619655,3134.425744,3134.623002,3135.533583,
	3136.216082,3136.829275,3137.171915,3137.63262,3139.017198,3140.272028,3141.847238,
	3142.835605,3145.636991,3146.043368,3147.448606,3150.455077,3151.017008,3151.184006,
	3153.218199,3155.830181,3156.400648,3157.507067,3158.617344,3159.707222,3160.823743,
	3161.688137,3163.094967,3163.715241,3164.481563,3165.291051,3169.328492,3169.668007,
	3171.275477,3171.509864,3172.111202,3173.426654,3173.70457,3174.019111,3174.20434,
	3174.839294,3175.725737,3176.16708,3178.243304,3179.048191,3180.193754,3181.037112,
	3182.405455,3182.642528,3184.27684,3186.171701,3191.093121,3192.585625,3193.159769,
	3193.368884,3193.780994,3195.313946,3195.689137,3198.229104,3203.104532,3203.392994,
	3204.320885,3205.288757,3207.581032,3207.782509,3209.750241,3210.308825,3210.777756,
	3211.194319,3212.518078,3214.074664,3214.380124,3216.997913,3220.350851,3221.864105,
	3222.397889,3225.411053,3226.119007,3227.470455,3229.009593,3230.867963,3232.124977,
	3232.30618,3235.667388,3235.839985,3236.573413,3237.232332,3238.115747,3238.93431,
	3240.644805,3240.94704,3241.10795,3242.379017,3243.688079,3244.043439,3244.448809,
	3244.881507,3245.994211,3248.893834,3249.343128,3251.91591,3252.964413,3253.683861,
	3253.865943,3254.067323,3254.809902,3256.273854,3256.695406,3257.162051,3257.366748,
	3259.060869,3259.245136,3262.3171,3262.668454,3263.182781,3264.121613,3267.002454,
	3268.757445,3269.469866,3270.099402,3271.546009,3272.0268,3273.317142,3274.403982,
	3275.067597,3275.260053,3275.643359,3276.719942,3281.048784,3281.70095,3282.616574,
	3282.979571,3285.514818,3286.582912,3287.789301,3288.160274,3290.59962,3291.739449,
	3292.31152,3292.925471,3294.245237,3297.374831,3297.833304,3298.049858,3304.23836,
	3305.303626,3307.228257,3309.135852,3309.36545,3310.63646,3310.813173,3313.070388,
	3318.390131,3319.91016,3320.476319,3322.093322,3324.752706,3325.120752,3325.965805,
	3326.465259,3327.193167,3327.71276,3327.879727,3329.728397,3330.477007,3331.726357,
	3333.128998,3334.60412,3335.239216,3335.474182,3337.870357,3338.39705,3338.598026,
	3340.725458,3341.740642,3343.812927,3346.555999,3347.403823,3347.992311,3349.32947,
	3350.923835,3351.228617,3352.036089,3353.948473,3354.179605,3355.106131,3355.972365,
	3357.058119,3357.235167,3358.601994,3360.37355,3360.99824,3361.197899,3362.676256,
	3365.137587,3365.978862,3367.582229,3373.844479,3374.974894,3378.573379,3378.803715,
	3379.090049,3380.570232,3380.859541,3383.586106,3384.992426,3385.531607,3386.50066,
	3386.763253,3387.920553,3389.037362,3389.463266,3389.640541,3390.368122,3392.034957,
	3393.230819,3393.421494,3393.992954,3394.797014,3395.112389,3395.986186,3396.727801,
	3397.516114,3398.544852,3402.026404,3403.005954,3405.558381,3406.838551,3408.749883,
	3409.269918,3417.497794,3418.775515,3419.173303,3421.210006,3423.129072,3423.707094,
	3423.989681,3426.742667,3427.993575,3428.999181,3429.38927,3430.12733,3431.263949,
	3431.810465,3432.583087,3433.555396,3435.977129,3437.307095,3438.950331,3439.398751,
	3441.364697,3441.526792,3442.579014,3444.253057,3445.217278,3445.744152,3446.547456,
	3448.948718,3449.287076,3450.947518,3451.702372,3452.682073,3454.094963,3455.272624,
	3455.613072,3456.441731,3457.069153,3457.433993,3458.141342,3458.458644,3461.018679,
	3461.217251,3462.850565,3463.71971,3464.126777,3466.33295,3466.896805,3468.219799,
	3469.345454,3469.920804,3470.567491,3471.000537,3471.596494,3471.95933,3475.538088,
	3476.74714,3477.70426,3478.463542,3479.684721,3480.052529,3481.002984,3484.080004,
	3484.943524,3485.472192,3485.676737,3487.315475,3488.833855,3489.184152,3489.5076,
	3490.872959,3491.24371,3491.535601,3491.900053,3495.699846,3496.810716,3497.686065,
	3498.621016,3501.455948,3503.785976,3504.992236,3505.494138,3506.132793,3506.645794,
	3506.852035,3509.777919,3514.387363,3516.354506,3516.577158,3516.824308,3518.404024,
	3519.993364,3521.059481,3521.259918,3523.50615,3523.758548,3524.178731,3524.536471,
	3526.634204,3527.000519,3527.322379,3528.411658,3529.385973,3530.51478,3531.450561,
	3536.976754,3537.159758,3538.212569,3539.322306,3539.587276,3539.840089,3541.615914,
	3541.969699,3543.146944,3544.017956,3545.595189,3545.843139,3547.917487,3548.514041,
	3549.595944,3550.292441,3551.401923,3553.110325,3554.305517,3555.01352,3555.704633,
	3556.314437,3556.903771,3561.030143,3563.911118,3565.029311,3565.604254,3566.371807,
	3567.26381,3569.620438,3569.820475,3570.357715,3570.523976,3571.00922,3571.573099,
	3572.067237,3573.219647,3575.126295,3576.615368,3577.215674,3577.599396,3578.355625,
	3578.949763,3580.991237,3581.608015,3582.009135,3582.354424,3584.175638,3588.440232,
	3589.749503,3589.994165,3590.925332,3591.254823,3591.452414,3592.487098,3594.111161,
	3594.985616,3595.617736,3597.495522,3598.119977,3598.524701,3599.724018,3600.432327,
	3601.771594,3603.204207,3605.193661,3606.521607,3607.393345,3607.733041,3608.881673,
	3609.445187,3611.160461,3611.813042,3612.42748,3612.866647,3615.132757,3615.850348,
	3616.177796,3617.671589,3618.363366,3618.596972,3619.211926,3619.390971,3620.838712,
	3622.795452,3624.472007,3625.628038,3629.850332,3634.213564,3634.582206,3635.241904,
	3635.419485,3635.943368,3636.56673,3638.319271,3638.644471,3639.446974,3642.249004,
	3642.572916,3643.512345,3643.825007,3644.713816,3644.980407,3645.955851,3647.932982,
	3648.855241,3649.249611,3650.204603,3652.537225,3654.461786,3656.049461,3656.693835,
	3657.0554,3658.808733,3659.629386,3661.983328,3663.202503,3664.591484,3665.181162,
	3666.981142,3667.621842,3668.139866,3671.004152,3671.539836,3672.300297,3672.521789,
	3673.793557,3674.418515,3674.891013,3675.137204,3675.567575,3675.789326,3675.959279,
	3676.689687,3679.134333,3679.544434,3679.710495,3680.06045,3680.447719,3683.493166,
	3684.932899,3685.587034,3687.670047,3687.984143,3690.623869,3690.89486,3691.411749,
	3691.614109,3692.566417,3693.247361,3695.288968,3695.973758,3697.030856,3697.743648,
	3698.106179,3698.754555,3699.880809,3700.765379,3700.978233,3702.863833,3703.229921,
	3703.774325,3704.337359,3706.767261,3707.722123,3711.30411,3711.622934,3714.070569,
	3715.560653,3715.861553,3716.583658,3719.434728,3721.215223,3721.82545,3723.289817,
	3723.919923,3725.393215,3727.612014,3727.902757,3729.308136,3730.368368,3732.985429,
	3733.672438,3737.512535,3737.888945,3738.357288,3740.855132,3741.183057,3742.923393,
	3743.50828,3745.659122,3745.970638,3747.539032,3752.568973,3752.79042,3753.242101,
	3754.288404,3754.593057,3755.212137,3756.294123,3757.694157,3758.467089,3758.70629,
	3760.807213,3761.704389,3762.416594,3764.192395,3766.447304,3768.43589,3770.055998,
	3771.370827,3772.236947,3772.649869,3773.052086,3773.757441,3774.733159,3774.976046,
	3776.271162,3779.562436,3783.012697,3783.296425,3784.575599,3785.600691,3786.383,
	3787.933732,3788.359497,3790.083796,3790.795014,3792.730469,3793.815763,3794.150875,
	3794.697945,3797.454398,3798.103527,3800.198363,3800.37237,3800.588763,3802.419762,
	3803.984627,3804.69856,3807.27273,3807.874216,3808.128934,3809.456226,3809.835378,
	3810.995489,3812.3979,3813.067943,3813.815043,3815.026758,3815.565429,3816.166157,
	3817.116454,3818.685274,3820.792436,3821.430886,3822.862544,3823.067356,3823.992416,
	3825.672458,3826.36883,3826.807333,3828.38462,3830.060435,3830.773695,3832.583012,
	3832.788843,3833.085784,3834.678239,3835.710528,3837.024398,3837.875485,3840.800127,
	3841.518528,3841.96032,3842.550255,3843.508687,3844.731154,3845.405511,3846.249004,
	3846.626761,3847.619324,3848.629091,3849.911264,3850.133154,3850.581478,3852.135168,
	3852.95863,3854.510257,3857.508124,3863.405946,3866.908367,3868.528624,3869.663262,
	3871.616763,3872.137342,3873.147903,3873.822102,3874.243737,3874.862342,3875.646477,
	3879.268711,3879.447701,3879.644138,3881.49895,3882.144129,3882.323983,3883.767924,
	3884.81998,3885.404693,3885.768405,3889.906259,3891.726166,3891.979258,3893.344327,
	3893.651916,3894.408678,3894.660049,3895.419264,3897.316676,3898.795701,3900.878145,
	3901.152563,3901.661916,3903.102286,3903.481532,3905.186018,3907.543305,3908.748399,
	3909.138646,3910.521068,3910.773586,3912.490668,3913.645438,3914.768255,3915.848553,
	3916.417436,3917.269011,3917.767654,3918.501434,3919.460113,3923.7994,3924.404367,
	3925.719162,3926.045746,3926.863849,3927.176351,3928.623574,3929.669203,3931.997851,
	3932.226498,3932.546855,3932.911332,3933.661199,3934.275583,3934.797506,3937.039891,
	3939.15449,3939.538116,3940.196685,3942.358616,3944.0065,3945.507354,3945.820294,
	3947.135709,3947.3306,3947.504607,3950.395397,3950.804941,3954.727845,3958.927319,
	3959.299941,3962.419438,3964.029968,3966.052889,3966.964231,3967.392112,3968.359459,
	3969.002322,3969.665214,3970.230716,3972.154338,3972.6393,3974.476567,3976.414779,
	3979.355779,3980.754517,3981.106438,3981.828197,3982.102662,3984.094828,3984.374301,
	3984.879451,3986.075596,3988.600082,3988.845145,3990.492442,3991.731075,3992.053554,
	3992.273486,3993.29914,3994.549534,3994.792091,3996.061659,3996.669562,3998.952364,
	4000.280454,4000.746866,4001.057991,4001.893615,4003.105728,4005.092975,4005.961904,
	4006.380689,4008.210288,4010.293018,4011.209659,4012.192585,4012.495421,4014.716342,
	4019.128807,4020.353942,4021.14938,4021.750576,4024.80223,4029.826137,4030.292633,
	4030.842436,4034.246283,4035.460437,4036.047864,4036.565449,4038.22919,4038.456911,
	4038.804857,4039.865616,4041.203396,4042.894358,4043.395046,4044.418042,4044.926781,
	4045.226715,4045.965436,4046.251809,4046.825165,4047.059991,4049.944572,4050.887229,
	4051.499156,4052.92101,4054.302003,4054.526327,4056.401297,4056.635931,4057.940889,
	4059.252861,4061.625023,4062.082822,4063.407073,4064.331561,4065.889258,4066.433958,
	4067.450978,4067.87674,4068.471566,4069.20192,4069.76085,4070.23816,4072.38482,
	4074.641923,4075.503004,4075.907164,4076.628745,4076.943344,4081.367927,4082.082252,
	4082.38772,4082.865791,4083.468911,4085.042472,4085.433751,4086.520592,4089.137621,
	4091.027383,4093.392143,4093.671618,4094.747403,4096.076549,4097.747286,4098.933009,
	4099.993311,4100.341269,4101.55282,4102.617755,4102.819278,4104.381577,4104.837546,
	4107.05032,4108.419732,4109.323634,4114.489721,4115.758823,4116.713432,4118.489808,
	4122.965693,4128.640145,4130.324641,4131.002095,4134.323895,4135.479805,4138.040573,
	4141.01335,4142.700927,4145.048236,4147.540441,4148.181686,4151.145471,4152.916567,
	4154.720565,4156.085726,4159.153885,4160.062784,4160.739713,4161.109738,4161.738871,
	4163.180012,4165.766346,4166.905758,4167.865471,4168.046939,4168.63406,4170.53309,
	4170.784682,4171.341017,4172.381731,4172.625838,4174.439626,4178.059409,4178.848605,
	4180.721948,4181.883406,4184.137634,4185.805041,4187.140573,4191.827206,4192.361872,
	4193.016371,4194.082412,4194.936108,4204.538132,4207.175392,4207.612643,4208.411158,
	4209.196267,4210.456944,4210.923021,4211.514424,4213.067117,4215.2104,4215.627803,
	4215.851439,4217.430828,4220.066936,4220.731987,4221.153725,4221.691494,4222.637351,
	4225.802401,4226.299091,4226.987481,4227.387297,4228.157937,4229.147346,4229.454187,
	4230.426111,4230.823466,4232.261317,4233.288251,4233.906232,4235.463786,4236.390268,
	4241.094942,4241.700319,4241.971114,4242.719927,4243.019662,4243.261039,4244.274025,
	4246.322271,4249.679373,4253.538831,4255.237191,4256.253647,4258.519951,4260.332518,
	4261.275159,4261.492698,4262.612445,4264.106807,4266.286458,4266.527325,4269.064793,
	4269.6276,4269.942283,4270.328531,4270.734934,4272.874347,4273.357439,4276.807189,
	4278.322907,4279.059142,4279.638074,4280.567019,4281.068158,4281.414763,4282.897713,
	4283.51823,4285.939783,4286.699974,4288.6688,4291.809723,4292.306267,4293.438002,
	4295.584873,4295.815748,4298.564425,4299.634234,4299.839604,4300.649946,4303.989208,
	4307.176075,4308.121805,4311.799273,4313.602453,4315.254471,4317.841503,4318.415661,
	4319.806973,4320.126431,4321.431897,4321.726615,4325.274266,4327.715159,4328.915443,
	4330.411334,4330.84412,4332.029855,4332.339116,4333.936931,4337.277141,4340.895167,
	4342.048634,4342.443971,4342.973116,4343.3818,4343.951448,4344.326495,4349.072129,
	4349.629976,4353.448831,4354.482703,4355.320241,4355.526904,4356.044246,4356.521409,
	4357.613456,4358.320293,4359.372555,4360.167295,4362.066631,4362.472055,4363.79473,
	4365.930205,4369.875571,4372.489522,4376.530911,4378.176824,4379.213895,4379.667209,
	4380.286039,4381.859986,4385.057274,4387.734646,4388.969824,4391.110881,4392.974102,
	4393.759438,4396.13958,4396.478255,4397.009579,4400.38561,4401.58093,4402.926798,
	4403.713425,4408.481762,4409.89882,4414.486318,4416.237933,4416.845034,4419.770424,
	4422.048113,4423.261994,4423.720151,4430.996494,4431.414024,4432.252182,4432.962762,
	4433.491016,4433.838218,4435.678467,4436.283559,4437.444892,4439.123394,4439.461496,
	4440.573767,4440.866037,4447.229655,4448.879769,4449.52016,4450.239718,4451.050772,
	4451.740841,4452.565919,4454.139273,4454.515415,4457.236156,4458.001577,4460.557349,
	4461.241078,4461.527666,4463.666343,4464.136229,4465.340307,4468.320958,4469.189256,
	4469.525401,4470.990465,4475.221486,4475.765046,4477.213582,4478.595578,4480.267877,
	4480.824881,4482.169703,4483.347289,4484.289926,4486.897614,4487.495789,4488.311951,
	4488.679208,4489.664858,4490.672955,4490.982155,4494.690823,4495.236832,4498.539067,
	4499.703284,4499.983224,4502.927116,4504.630538,4505.216342,4513.222627,4513.67994,
	4515.118228,4515.6275,4517.884565,4519.259216,4524.12867,4524.838426,4525.445679,
	4526.027843,4526.918393,4527.177005,4527.443463,4528.021494,4528.41004,4529.923267,
	4530.319024,4530.55233,4532.257632,4534.119077,4534.402726,4535.254374,4535.979533,
	4537.64225,4539.724837,4540.998918,4544.513519,4547.759159,4548.979758,4549.834344,
	4556.387047,4556.807521,4558.345945,4559.058632,4559.31201,4560.39423,4561.012595,
	4562.080492,4564.179718,4564.405822,4564.835313,4567.239946,4568.142371,4568.523251,
	4569.147621,4570.972161,4571.218853,4571.53162,4571.957776,4572.892195,4574.027011,
	4574.305291,4577.581732,4579.827278,4583.063308,4583.654394,4583.874476,4584.652635,
	4588.426418,4592.66643,4593.643959,4598.436758,4598.762949,4599.704748,4602.419761,
	4602.8864,4603.143767,4604.652617,4607.377126,4608.619441,4611.244453,4612.543928,
	4613.60401,4615.024319,4615.334111,4615.883896,4616.452497,4617.297456,4617.906619,
	4620.242532,4620.448195,4622.121289,4624.314351,4625.275057,4625.494718,4627.298084,
	4628.201884,4628.441048,4638.125558,4638.684582,4643.864399,4644.707008,4647.250193,
	4649.977396,4650.234614,4651.989384,4655.212846,4656.182882,4659.570368,4662.594029,
	4663.202971,4664.97079,4666.516185,4666.798835,4668.171424,4669.984249,4675.375803,
	4681.496464,4682.730405,4683.351536,4685.074039,4686.1947,4686.572008,4690.334215,
	4690.622309,4691.884915,4694.091583,4695.454438,4697.595571,4700.771172,4707.045329,
	4708.29364,4712.840378,4714.119183,4714.671789,4715.430361,4719.441906,4719.692712,
	4720.457623,4720.780633,4721.276176,4721.590308,4722.088747,4723.784408,4728.13379,
	4728.593564,4729.128367,4729.879829,4730.09216,4730.88117,4731.195632,4732.054032,
	4734.045668,4737.918238,4738.471461,4739.676734,4742.117501,4742.566519,4749.199831,
	4752.414027,4755.394147,4758.760167,4760.433694,4761.109795,4761.861061,4762.524882,
	4764.346347,4765.595474,4766.601069,4766.96186,4767.482687,4775.313691,4775.794315,
	4776.321138,4776.779309,4777.191733,4780.751025,4781.290151,4782.761194,4784.931003,
	4785.271954,4786.530632,4787.147499,4789.386339,4790.437579,4792.594889,4793.24488,
	4793.677241,4793.904562,4795.913819,4800.171433,4801.051591,4801.348222,4802.671208,
	4803.955663,4809.614655,4812.376111,4817.020718,4818.295327,4818.647871,4819.193168,
	4820.884994,4823.605718,4823.996682,4824.64921,4826.3666,4828.660096,4829.796917,
	4831.120944,4831.597425,4832.161917,4837.695793,4840.475242,4840.84274,4845.163006,
	4847.32661,4848.362742,4849.862041,4850.439875,4852.868708,4853.608009,4857.538736,
	4858.332526,4862.432943,4868.880725,4871.28859,4874.364234,4876.495337,4878.00946,
	4878.733135,4881.204677,4881.597495,4881.85397,4882.243739,4887.094321,4887.948196,
	4888.261987,4889.490314,4889.857693,4891.037716,4891.660229,4892.759664,4893.445228,
	4893.70548,4897.588328,4897.926578,4902.792955,4907.208698,4908.012642,4909.210714,
	4910.156909,4910.548612,4912.528468,4913.479358,4915.416563,4919.816059,4927.299697,
	4929.085714,4929.986413,4933.209697,4939.270487,4939.641603,4941.41569,4943.063499,
	4946.662819,4950.251328,4950.626354,4952.690263,4953.930837,4955.721337,4955.965368,
	4958.097352,4961.382796,4961.726585,4963.188471,4965.732215,4967.333293,4968.755634,
	4970.843718,4975.948676,4978.721004,4980.185897,4980.950241,4982.486931,4985.372021,
	4985.947784,4986.335483,4987.146715,4987.55846,4989.308372,4992.125491,4992.633479,
	4993.749146,4994.105932,4995.299822,4996.533624,4997.325079,4999.940293,5000.246624,
	5002.097356,5002.894914,5003.598696,5005.976613,5008.189708,5009.335298,5010.41729,
	5011.477936,5013.165607,5014.184036,5014.448752,5015.280263,5016.535411,5019.806082,
	5021.252837,5023.481477,5023.708441,5025.860934,5029.011667,5029.629949,5029.891591,
	5033.311842,5036.729092,5039.230522,5039.526601,5041.600659,5043.515543,5044.343079,
	5045.248316,5046.353235,5047.043744,5047.426158,5050.784272,5051.34185,5051.888619,
	5052.857397,5054.176372,5054.620905,5057.986289,5059.860949,5061.656103,5062.932389,
	5063.514632,5064.601734,5064.944882,5065.192056,5066.135402,5066.777182,5067.137803,
	5069.334846,5070.451884,5073.981464,5074.646784,5075.466404,5076.592766,5078.033036,
	5079.13959,5081.446377,5082.623269,5084.994251,5085.83971,5086.835472,5090.051923,
	5095.855643,5096.484919,5097.645229,5098.043343,5101.129448,5106.667313,5109.732496,
	5111.277808,5115.044494,5122.499794,5123.858608,5125.489648,5126.655963,5128.490403,
	5130.234482,5134.746459,5137.473905,5145.037484,5145.30861,5146.055581,5148.211631,
	5149.206958,5154.242014,5156.608835,5158.604754,5161.539521,5162.285814,5163.458074,
	5165.772981,5168.585992,5173.672033,5174.799363,5175.325212,5175.911809,5178.480954,
	5179.144518,5180.721481,5183.990252,5184.454017,5186.413027,5188.366006,5190.871176,
	5194.457234,5195.813306,5197.235729,5202.009251,5203.846874,5205.152904,5209.724726,
	5211.230608,5212.347549,5212.682412,5215.765395,5216.59658,5218.527844,5219.11026,
	5220.307751,5220.927451,5221.862481,5222.262956,5228.224679,5228.994997,5230.500431,
	5233.225429,5237.232668,5237.627634,5238.813071,5240.196395,5242.089528,5242.682167,
	5247.654859,5247.983966,5249.545574,5250.87281,5256.562889,5258.360132,5259.775891,
	5260.104444,5265.551661,5266.710292,5267.163945,5267.965177,5268.255384,5272.644123,
	5272.92704,5274.118669,5274.945847,5276.408426,5277.146034,5281.068457,5281.628674,
	5284.542059,5286.069521,5286.88695,5291.81662,5292.345133,5293.136166,5293.442768,
	5293.811852,5294.066369,5294.396938,5295.08854,5297.407579,5298.282447,5298.560336,
	5299.080921,5300.523253,5301.404493,5338.639308,5340.498065,5343.581173,5344.524321,
	5345.31147,5346.377927,5347.971782,5349.005334,5349.706555,5350.205297,5351.126857,
	5354.601394,5355.636115,5358.707408,5359.826437,5360.149511,5361.155263,5362.253974,
	5362.575235,5363.097099,5366.708196,5370.70932,5371.994848,5372.702205,5374.821567,
	5375.352518,5375.768622,5376.13005,5378.835215,5379.110219,5382.927239,5384.035411,
	5386.610713,5387.813206,5388.051083,5391.076288,5392.572787,5393.600197,5394.761204,
	5396.110525,5397.516616,5398.205732,5398.702101,5399.1752,5399.622162,5400.146164,
	5402.60504,5403.199272,5404.704096,5405.208258,5406.754625,5407.34361,5407.653006,
	5410.768418,5412.44637,5424.007403,5425.677824,5426.406673,5429.104937,5431.111593,
	5433.291671,5434.151676,5435.123689,5436.231481,5436.500247,5437.388347,5440.601143,
	5441.589686,5446.022761,5448.272401,5449.47979,5451.65205,5452.21866,5454.305823,
	5457.797894,5458.969195,5462.337536,5462.612784,5463.318337,5463.767589,5464.205069,
	5466.80584,5467.922554,5470.758744,5471.388309,5472.069345,5477.553591,5479.074296,
	5479.684032,5480.407027,5481.480095,5484.986993,5487.508931,5490.682264,5491.532366,
	5492.643935,5493.204396,5493.969799,5494.331392,5495.875079,5496.137602,5499.647681,
	5501.280955,5501.944769,5503.26561,5504.30159,5506.919563,5507.538772,5508.558582,
	5509.993104,5512.701347,5514.375946,5514.873106,5518.989225,5521.452048,5521.75308,
	5524.219219,5524.956476,5527.294542,5529.09742,5530.075524,5530.69684,5535.970908,
	5537.555881,5539.2618,5539.910639,5540.509104,5541.582669,5541.93583,5542.473429,
	5542.890641,5543.90447,5545.050449,5545.806496,5546.12073,5547.134707,5548.176013,
	5550.681538,5555.531191,5555.834177,5556.148467,5557.045427,5557.921444,5559.142762,
	5559.891048,5570.926601,5572.093722,5576.204181,5579.357544,5580.077108,5580.392565,
	5580.755059,5582.366961,5583.76248,5590.592868,5593.268918,5593.612466,5594.461338,
	5595.064394,5596.837306,5597.476746,5599.655001,5601.603067,5602.627505,5604.515166,
	5606.386056,5610.680538,5612.067646,5612.616566,5618.014336,5620.92162,5622.083659,
	5625.678431,5626.058349,5630.296222,5631.155668,5632.492634,5633.294805,5639.126188,
	5639.746033,5643.109871,5646.453195,5647.70634,5648.686951,5648.990954,5650.70512,
	5655.490096,5657.181915,5657.925206,5663.041672,5664.620855,5665.179556,5665.628288,
	5666.419209,5667.127984,5671.496833,5673.836093,5677.052542,5680.210406,5683.730633,
	5685.192577,5686.875995,5687.348449,5690.693022,5692.159933,5693.571007,5694.061545,
	5694.434544,5695.133213,5696.390416,5697.086984,5698.294609,5700.459069,5702.032016,
	5702.651464,5703.271499,5704.376668,5707.103137,5709.507176,5711.086354,5711.996529,
	5715.72393,5717.170806,5717.523879,5719.097307,5721.423878,5723.532425,5725.011923,
	5725.388111,5725.894808,5727.710012,5729.114529,5729.982784,5734.164965,5735.301558,
	5736.029422,5737.894918,5738.964396,5739.520188,5741.171037,5741.829296,5742.655924,
	5745.674893,5748.324266,5748.741222,5749.389072,5749.78668,5750.269815,5752.583354,
	5753.026927,5763.528456,5767.778495,5768.181074,5768.633272,5771.136797,5771.759798,
	5776.167328,5777.099293,5777.400224,5783.53795,5789.644814,5790.402119,5792.430723,
	5792.996048,5796.068933,5797.319784,5798.478775,5800.829807,5802.081595,5805.700655,
	5806.587279,5808.07565,5808.656496,5811.844256,5812.972562,5815.421655,5816.995607,
	5818.449035,5819.126399,5819.602612,5822.792943,5828.075657,5829.11075,5830.827386,
	5832.370428,5834.264304,5838.949666,5839.850998,5840.64,5843.804948,5845.919546,
	5849.767458,5851.217355,5852.680944,5853.474514,5854.120429,5860.31081,5863.719119,
	5866.812191,5868.374378,5869.851186,5871.182407,5872.602399,5874.350625,5878.276421,
	5881.907559,5882.624429,5884.033279,5885.701097,5886.531229,5888.263251,5891.45079,
	5894.700104,5895.281404,5895.924028,5896.363174,5899.844054,5902.601574,5905.175364,
	5905.570764,5906.319412,5911.230285,5914.385629,5918.945499,5920.976996,5925.404219,
	5926.231866,5929.933924,5930.311303,5932.426324,5936.874664,5937.663235,5940.565552,
	5944.647267,5946.235714,5948.798653,5953.248492,5953.58196,5955.561293,5956.25726,
	5960.782045,5964.472956,5967.511634,5968.319156,5969.736805,5975.065492,5976.200563,
	5983.999554,5985.915285,5986.266195,5987.301034,5989.044879,5989.742427,5990.264779,
	5991.006437,5993.492876,5995.219797,5995.682004,5996.629542,5998.998413,6001.203223,
	6005.16538,6007.071707,6008.439369,6010.160403,6013.677581,6014.05566,6015.421838,
	6016.359238,6017.527619,6018.995197,6021.035954,6021.410945,6023.224636,6025.15012,
	6027.247932,6029.226527,6029.649655,6030.444634,6032.872513,6034.540851,6035.192945,
	6035.874794,6036.763611,6038.680894,6039.226899,6042.589816,6046.898423,6049.775078,
	6050.981354,6052.723191,6053.380881,6055.593561,6056.880556,6058.179884,6065.779692,
	6069.020461,6070.341055,6073.103405,6077.10623,6077.873444,6078.42172,6079.223155,
	6086.700068,6087.262239,6088.030147,6088.824468,6090.107849,6090.446805,6090.786428,
	6098.119995,6098.803276,6099.083282,6099.989363,6101.161657,6101.725299,6102.594888,
	6105.635022,6107.533218,6112.837405,6113.465684,6113.963466,6116.166035,6120.556142,
	6123.362088,6123.833472,6124.48035,6125.739064,6130.119929,6130.456217,6133.814129,
	6136.702068,6137.927168,6139.650409,6141.224257,6142.074202,6143.424766,6144.757809,
	6150.683097,6151.993136,6154.067977,6154.515407,6155.238304,6157.087549,6161.352783,
	6162.170209,6165.123306,6167.626663,6173.095869,6178.431309,6180.704936,6187.135068,
	6189.144126,6193.855665,6195.32059,6200.432855,6205.859937,6207.749451,6208.686951,
	6209.951376,6213.65484,6214.539989,6215.939548,6220.011596,6223.520607,6226.369616,
	6234.855274,6237.102275,6239.713735,6240.303448,6240.953508,6243.120579,6245.040985,
	6246.174431,6248.405488,6250.485123,6257.423258,6258.606445,6260.217164,6261.063971,
	6264.313748,6264.714995,6268.200175,6271.545663,6274.117134,6276.163901,6277.240161,
	6279.163311,6279.977795,6284.262202,6285.278073,6287.255422,6289.487365,6291.191394,
	6292.891193,6293.242453,6296.873431,6297.778852,6298.902103,6300.916443,6301.4125,
	6303.250903,6304.242481,6307.657424,6308.71133,6309.160048,6310.810115,6312.624675,
	6315.774781,6317.183397,6321.820008,6326.366601,6331.414229,6335.405108,6335.702065,
	6337.620376,6339.305628,6339.668592,6346.120802,6347.105992,6348.737373,6350.895933,
	6355.273791,6355.629962,6355.910728,6357.02289,6357.679181,6359.1312,6359.674339,
	6362.251095,6363.271719,6369.575508,6370.796002,6372.460614,6376.930646,6377.494975,
	6377.966505,6379.673103,6381.360396,6381.759415,6387.39542,6387.864845,6388.813122,
	6390.128335,6392.368363,6394.729845,6395.048072,6396.950247,6399.207531,6400.697592,
	6406.445887,6408.903751,6413.614241,6415.537946,6422.107178,6422.897702,6424.813432,
	6428.773744,6432.957684,6436.670214,6441.281232,6441.900583,6446.135927,6446.770949,
	6450.954302,6452.058673,6454.628057,6455.264689,6460.474603,6464.400281,6467.675057,
	6471.213617,6472.429914,6472.964408,6475.323342,6483.0833,6486.225246,6487.480759,
	6488.883005,6490.737378,6493.197488,6495.255569,6497.49043,6500.657413,6501.361901,
	6501.991345,6503.511916,6506.986702,6513.845387,6522.04242,6526.906056,6536.14454,
	6537.175434,6542.049823,6545.718868,6550.185283,6550.54876,6551.70562,6558.875783,
	6564.444993,6565.06877,6569.632213,6571.39902,6576.123271,6577.656281,6579.479916,
	6580.22986,6584.612923,6585.694057,6593.462049,6596.113003,6597.377907,6598.675206,
	6599.482253,6600.730997,6601.129285,6602.762524,6603.620514,6604.85343,6605.416955,
	6608.445136,6617.058979,6617.515959,6618.164963,6619.945897,6620.407767,6632.083536,
	6638.221029,6638.911903,6639.740761,6646.540749,6648.495757,6648.957834,6650.560296,
	6653.602081,6655.070093,6655.488955,6658.677188,6660.675984,6663.696428,6664.050878,
	6666.358628,6672.112894,6673.579996,6674.696969,6678.706868,6680.081626,6683.367225,
	6684.293258,6684.788419,6692.726335,6694.006106,6694.496307,6697.712496,6698.874332,
	6708.840571,6710.542891,6711.252013,6713.969781,6715.188149,6717.384832,6721.078925,
	6722.890153,6726.310652,6726.948001,6728.118304,6728.758749,6729.933252,6731.670711,
	6732.649499,6733.314495,6733.748613,6735.126311,6738.18018,6741.922163,6742.498602,
	6742.884245,6746.137701,6749.316763,6751.427406,6753.659461,6757.109172,6758.203031,
	6762.501256,6763.331336,6766.612079,6773.096382,6778.313276,6779.323731,6780.125504,
	6786.362785,6787.736551,6788.84024,6791.234859,6795.797722,6796.782639,6798.487313,
	6800.465532,6802.785657,6804.738129,6805.749528,6807.318004,6808.531565,6810.550549,
	6811.963563,6812.775403,6815.611803,6816.827999,6819.005745,6823.507684,6824.677603,
	6827.249245,6829.035562,6831.253391,6832.89262,6834.059086,6835.9124,6837.497319,
	6839.294455,6842.734183,6845.379032,6845.867648,6851.884961,6852.354282,6854.10935,
	6854.510251,6855.315494,6855.69027,6861.269179,6863.535106,6866.763067,6868.049023,
	6868.451278,6873.054276,6874.753192,6876.292646,6878.406651,6879.582453,6880.772283,
	6882.811098,6883.83973,6887.088119,6889.303144,6892.249428,6907.597092,6909.849224,
	6914.712705,6916.128859,6920.039398,6925.008918,6936.65275,6937.663708,6942.538016,
	6943.610523,6945.49021,6946.213364,6951.477124,6952.966582,6954.65602,6955.31503,
	6960.249543,6981.083106,6989.65526,6992.212068,6992.696581,6993.037071,6993.987303,
	6997.413029,7000.803628,7002.882909,7007.096109,7015.317135,7018.567528,7020.484079,
	7021.283193,7023.148631,7025.224644,7026.461598,7028.02281,7030.250958,7032.930972,
	7033.358768,7036.283039,7038.720228,7045.79702,7053.619563,7059.525247,7060.653804,
	7061.394155,7064.451514,7068.735373,7071.094142,7071.479975,7072.393907,7074.256321,
	7075.333559,7084.169001,7086.703961,7088.8232,7089.339466,7100.514421,7102.590941,
	7107.477291,7109.860168,7112.918909,7113.987857,7114.398383,7124.560689,7125.819469,
	7130.723542,7131.35855,7132.609987,7140.461653,7142.331007,7150.284392,7153.58763,
	7158.838154,7162.556425,7166.818364,7167.202742,7168.895141,7170.36071,7173.372448,
	7176.185969,7176.721272,7179.714637,7188.532023,7191.132793,7200.045414,7201.809029,
	7202.516112,7206.482928,7206.979882,7208.006314,7212.689565,7219.151439,7220.98086,
	7229.938112,7230.862255,7239.264498,7240.184773,7242.091918,7244.696524,7246.12765,
	7249.843644,7250.589445,7253.67597,7255.354065,7258.176943,7265.171889,7284.903267,
	7285.443168,7296.265917,7298.143373,7311.715419,7315.066071,7316.004481,7323.210539,
	7324.807294,7326.149078,7328.285014,7329.491578,7335.577133,7337.78121,7341.151478,
	7345.399103,7346.342736,7347.042974,7348.053831,7350.813537,7353.29255,7358.344856,
	7361.347167,7365.426051,7370.825497,7372.117865,7376.877194,7377.887294,7380.422908,
	7392.979599,7393.437669,7411.736264,7412.336357,7417.790792,7418.549859,7422.311318,
	7425.29365,7428.940503,7430.253226,7435.367797,7436.29646,7440.492849,7443.875232,
	7444.748861,7447.848797,7455.208017,7456.81825,7458.754043,7461.874566,7462.990977,
	7469.056521,7471.163605,7481.354454,7483.62556,7484.326163,7487.973811,7495.564089,
	7499.00242,7500.6551,7508.478695,7510.407726,7511.349807,7523.134713,7525.507848,
	7527.34832,7528.489172,7531.143674,7531.814727,7537.428637,7549.313767,7555.325385,
	7557.749443,7565.851494,7566.529606,7571.032553,7573.343696,7580.345947,7580.690427,
	7583.426168,7589.315033,7598.205405,7603.624269,7607.823001,7616.682707,7618.343787,
	7620.077241,7623.568225,7625.705231,7627.17483,7628.881301,7642.884179,7647.379393,
	7651.000546,7651.745077,7652.320117,7653.828355,7654.699741,7660.023374,7660.8903,
	7666.567883,7668.960731,7670.056955,7672.255125,7676.219503,7683.018869,7685.307498,
	7686.153743,7691.770605,7701.108035,7703.68497,7704.816383,7710.269186,7711.124803,
	7712.404926,7713.937717,7728.950948,7731.738494,7742.56281,7761.7133,7762.731966,
	7771.946753,7773.732521,7776.672664,7778.492192,7781.826259,7782.316513,7788.934115,
	7793.132528,7795.418454,7804.530006,7807.875886,7813.476036,7813.972856,7814.322428,
	7816.153359,7817.769853,7822.387696,7834.457746,7835.620881,7836.459704,7841.791042,
	7842.265566,7847.539388,7848.454642,7861.909446,7864.021806,7865.260318,7865.96977,
	7867.688297,7875.462514,7886.28298,7891.074479,7897.239769,7899.622869,7900.319926,
	7916.441468,7924.991405,7925.747742,7937.73347,7941.725859,7954.592217,7956.973426,
	7961.983123,7970.253705,7972.595942,7974.159111,7976.174244,7981.677181,7984.368431,
	7987.973076,7991.365442,7992.158716,7993.680797,8002.18803,8024.253002,8025.727026,
	8030.200402,8032.431249,8037.217764,8046.116362,8050.647986,8053.307955,8054.535448,
	8062.630368,8068.741874,8075.651782,8085.218964,8092.237307,8094.055396,8096.259988,
	8122.723329,8129.405086,8137.936246,8139.903124,8143.137909,8149.702097,8159.727615,
	8162.058607,8163.120952,8166.447668,8169.786443,8177.178768,8186.911262,8190.884825,
	8198.441996,8202.146809,8205.11097,8207.478411,8214.147185,8217.226337,8231.406828,
	8234.347415,8234.938064,8237.740798,8252.393524,8253.615523,8259.510948,8261.014244,
	8275.626506,8276.242961,8282.251114,8288.414222,8292.52712,8295.549681,8311.63059,
	8314.079264,8316.603689,8320.855356,8327.217638,8328.997499,8330.449354,8333.429398,
	8335.706611,8341.476954,8344.180942,8345.868498,8356.069227,8358.72594,8360.491469,
	8363.069556,8366.074039,8367.393599,8379.226037,8379.767834,8384.723465,8385.727941,
	8387.105285,8388.536224,8395.724124,8401.988977,8414.954176,8416.726817,8417.998115,
	8421.225355,8445.486996,8446.511509,8454.928504,8456.346772,8464.236635,8464.760956,
	8465.670502,8471.825985,8472.598607,8490.305885,8510.623937,8512.598393,8516.55419,
	8530.910768,8531.450517,8532.913658,8534.679664,8539.79291,8554.943992,8558.446353,
	8564.141995,8568.208713,8573.120489,8575.330448,8577.276762,8591.838671,8593.108838,
	8599.755287,8604.016589,8605.775647,8616.221875,8620.459617,8621.32247,8622.100888,
	8623.801422,8629.14144,8631.356458,8638.362204,8639.441589,8645.308606,8649.148977,
	8675.398294,8678.407764,8686.619419,8687.847928,8691.334622,8693.088527,8698.595762,
	8701.120796,8703.702461,8704.860087,8707.359106,8709.234029,8710.414148,8714.267774,
	8719.628959,8721.659442,8722.457684,8723.717666,8724.37604,8732.423947,8734.0233,
	8739.781595,8743.254513,8748.030881,8749.169625,8751.206153,8754.00967,8758.243376,
	8760.449561,8761.685632,8766.744973,8771.860292,8772.805163,8773.531948,8775.57321,
	8782.715508,8784.555745,8798.171941,8799.086895,8804.589321,8810.253946,8812.511039,
	8816.17278,8817.742996,8821.75852,8829.693786,8841.183227,8849.315089,8852.791584,
	8854.907859,8859.017994,8868.833307,8874.797576,8875.232328,8881.900274,8889.193845,
	8892.986447,8893.539678,8899.298381,8905.65633,8910.856536,8928.092415,8941.660762,
	8949.122626,8955.846664,8957.985934,8959.284529,8962.894111,8967.640269,8968.948108,
	8969.866623,8971.363979,8986.616221,8990.893469,8995.189197,8995.862715,9008.456738,
	9009.883126,9011.515147,9012.526249,9016.590249,9017.591428,9031.819313,9035.919111,
	9037.893765,9040.122853,9045.353161,9048.250039,9060.746633,9062.562998,9063.959977,
	9066.111421,9068.024773,9069.581659,9075.393921,9076.194812,9090.818586,9098.574389,
	9101.082562,9106.562758,9107.226842,9112.670169,9132.273873,9134.691822,9140.555882,
	9153.366334,9156.923497,9159.032791,9165.01411,9165.894985,9170.821948,9178.779472,
	9180.121639,9187.565373,9192.592924,9199.684057,9208.02515,9208.581037,9215.919619,
	9218.985795,9227.511839,9232.495905,9233.273822,9233.857325,9234.398593,9240.215729,
	9243.760213,9249.906661,9250.578121,9258.77144,9260.325295,9266.206929,9267.689395,
	9270.150022,9271.180104,9274.71595,9276.273096,9279.70886,9286.380393,9289.562352,
	9291.530673,9294.973966,9300.013027,9307.895531,9310.443888,9317.729541,9338.767965,
	9379.728747,9380.643811,9383.272149,9384.099642,9388.930727,9390.585121,9393.775615,
	9409.348747,9414.088497,9417.456971,9431.599536,9435.122938,9436.229201,9436.812627,
	9455.202238,9467.195287,9470.681818,9474.879195,9478.328794,9486.925574,9495.497829,
	9497.189003,9505.392901,9507.652426,9508.450631,9535.653718,9536.406967,9548.03022,
	9561.245166,9565.558731,9567.280449,9567.829097,9570.402139,9571.501865,9577.347425,
	9588.806513,9601.925116,9607.534601,9608.486529,9608.935087,9619.576627,9622.066262,
	9625.198328,9627.670569,9629.569247,9636.901863,9641.191743,9642.477526,9664.69825,
	9674.791341,9678.80832,9683.732134,9684.799798,9695.031027,9700.563011,9713.111863,
	9716.141919,9736.212381,9739.768676,9746.462788,9750.13498,9753.591926,9756.14152,
	9757.219592,9758.636436,9769.534705,9773.567411,9789.511002,9793.230676,9796.200157,
	9797.245527,9800.362802,9800.926979,9803.689812,9812.697557,9814.420948,9819.178008,
	9824.641939,9826.449598,9833.42312,9840.917124,9849.458145,9854.060998,9855.742013,
	9864.597102,9865.44878,9867.890148,9868.920479,9871.994632,9873.814982,9878.520772,
	9890.527598,9896.048225,9898.353147,9902.356783,9905.885822,9906.391733,9907.471751,
	9912.199562,9932.774719,9938.835451,9943.064645,9949.150321,9951.088582,9952.370277,
	9963.49102,9967.042909,9970.462392,9972.332569,9974.689191,9985.049933,9987.635075,
	9989.937043,9991.842496,9992.648468,9998.959819,10011.39522,10022.28451,10039.36401,
	10045.3124,10048.0364,10054.96188,10056.20897,10068.97498,10102.57451,10111.59222,
	10127.54735,10133.5661,10137.38638,10140.43085,10141.39687,10144.26485,10163.37694,
	10175.00786,10178.51911,10180.59319,10184.53907,10188.41553,10211.53293,10218.43262,
	10236.02795,10247.55672,10283.11607,10288.99177,10308.54413,10332.73345,10334.92482,
	10346.53664,10349.04818,10369.52596,10419.57866,10459.72066,10470.05282,10478.03385,
	10492.25775,10494.83988,10498.49193,10500.19974,10506.50044]

	def first_wavelength_guess(m,data):
		#m=order number, not absolute number
		#data is the intensity extraction
		#data will be something like hdu[0].data, but the last column will be the initial
		#wavelength guess: [0,1,2,...,2745]
		#return ( (np.arange(len(data))*3.22361462) + 5.63900121e+05 )/(m)
		y=np.arange(len(data))
		m=m*np.ones_like(y)
		polyeval=models.Polynomial2D(6, c0_0=30926.947755056386, c1_0=-673.9423373884702, c2_0=7.294019086502992, c3_0=-0.039205546361748334, c4_0=8.368663157506121e-05, c5_0=3.150380281528674e-10, c6_0=6.791470092152859e-16, c0_1=0.1377307436757226, c0_2=1.4160263029916532e-07, c0_3=3.6347518168616513e-11, c0_4=-3.0601626939394096e-20, c0_5=-6.692094837998559e-30, c0_6=-8.347841498582338e-40, c1_1=-0.002185270558719285, c1_2=-2.97207864510324e-09, c1_3=-5.199257825714549e-16, c1_4=-1.1168364561273183e-25, c1_5=-1.3936982108667363e-35, c2_1=1.5211842788367896e-05, c2_2=1.1791835342620774e-13, c2_3=-9.168484772750957e-22, c2_4=-1.672954965676331e-31, c3_1=-3.893526686697217e-08, c3_2=-5.336343346876131e-18, c3_3=-1.5826010341059432e-27, c4_1=-1.0708673467679864e-13, c4_2=-1.601863527032523e-23, c5_1=-1.7012412725086238e-19)
		return(polyeval(m,y))

	def stderrfunc(x,b,a,c,fwhm,n):
		return np.abs(a)*(np.exp(-(np.abs(x-b)/fwhm) **(n))    )+c
		#a:peak height
		#b:centroid
		#c:continuum
		#fwhm:full width at half maximum
		#x:data
		#n:exponent, a broadening factor

	def find_nearest_index(array,value):
		return (np.abs(array-value)).argmin()

	def rmse(predictions, targets):
		return np.sqrt(((predictions - targets) ** 2).mean())

	crosscheckflag=order_checking(hdu)
	wavestack=[]
	wavepoints=[]
	for ind,i in enumerate(hdu):
		data=hdu[ind].data[0][::-1]
		wave=first_wavelength_guess(ind+71+crosscheckflag,data)#may need to modify 'ind' here if ordercheck needs a shift.
		for line in linelist:
			if line>np.min(wave) and line<np.max(wave):
				px = find_nearest_index(wave,line) #px is the index of the pixel closest to the line
				samplesize=10
				if px>samplesize and px<(len(wave)-samplesize): #not too close to ends
					y=data[px-samplesize:px+samplesize] 
					x=np.arange(len(data))[px-samplesize:px+samplesize]
					p0=[x[samplesize],np.max(y),np.min(y),1.5,3.] #initial guess as [b,a,c,fwhm,n]
					try:
						popt,pcov=curve_fit(stderrfunc,x,y,p0=p0) #use nl-sq marquardt-levenberg
						if np.sqrt(np.diag(pcov))[0]<(0.2) and popt[-1]>0:
							wavepoints.append([ind,popt[0],line])
					except:pass
	wavestack=np.vstack(wavepoints)
	m=wavestack[:,0]
	px=wavestack[:,1]

	#may be problems in hardcoding
	pixel=np.arange(0,len(hdu[20].data[0]-1))
	absord=np.arange(71+crosscheckflag,71+crosscheckflag+len(hdu))
	xx, yy = np.meshgrid(absord,pixel)
	# Fit the data using astropy.modeling
	p_init = models.Polynomial2D(degree=6)
	f = fitting.LinearLSQFitter()
	p = f(p_init,wavestack[:,0]+71+crosscheckflag,wavestack[:,1],wavestack[:,2])
	scatter_image=p(xx,yy) #slurp up these data, cancel plotting (leave in for checking)
	fig = plt.figure(1,figsize=(12,8))
	ax = Axes3D(fig)
	X,Y=np.meshgrid(absord,pixel)
	ax.plot_wireframe(X,Y,scatter_image,rstride=50,cstride=1)
	ax.set_xlabel('Absolute order number')
	ax.set_ylabel('Pixel')
	ax.set_zlabel(r'Wavelength ($\AA$)')
	ax.plot(wavestack[:,0]+71+crosscheckflag,wavestack[:,1],wavestack[:,2],'ro')
	plt.show() #this is the points vs 2dwavesol plot

	print"Arc reduction - ThAr wavelength solution found"
	print"Arc reduction - RMS error in wavelength solution in Angstroems = "+str(rmse(p(wavestack[:,0]+71,wavestack[:,1]),wavestack[:,2]))
	#scatter image is ord * pixel wavelength solution
	#for ind,i in enumerate(hdu):
	#	plt.subplot(6,8,ind+1)
	#	plt.plot(scatter_image[:,ind],hdu[ind].data[0][::-1]-np.min(hdu[ind].data[0][::-1]),'k-')
	#	for index,j in enumerate(wavestack[:,0]):
	#		if j==ind:
	#			plt.axvline(x=wavestack[index,-1],color='red',linestyle=':')
	#			plt.axvline(x=np.interp(wavestack[index,1],np.arange(len(data)),scatter_image[:,ind]),color='green')#true fit centre
	#			plt.text(np.interp(wavestack[index,1],np.arange(len(data)),scatter_image[:,ind])-1, 0.3*(np.max(hdu[ind].data[0][::-1]-np.min(hdu[ind].data[0][::-1]))), wavestack[index,2],
	#			horizontalalignment='center',verticalalignment='center',fontsize=11, rotation='vertical',color='green')
	#	plt.xlim(np.min(scatter_image[:,ind]),np.max(scatter_image[:,ind]))
	#plt.ylabel(r'Relative intensity')
	#plt.xlabel(r'Wavelength ($\AA$)')
	#plt.show() #this is the line IDed plot
	#scatter_image[:,ind] is the wavelength solution order number 'ind'
	#output this and fire it into the its in arc reduction saving.
	#need another flagset
	#if CCDtype == '??': reverse wavescale as x-axis on CCD reversed.
	return(scatter_image)

def findscatter(file='radius_masterflat.fits',nsteps = 100,poly_order_x = 6,poly_order_y = 4,figures=False, method='single'):
	print 'Determining Scattered Light'
	figures=False
	hdulist=pyfits.open(file)
	inputimage=hdulist[0].data
	#order_definition_parameters.npy
	orderparameters=np.load('order_definition_parameters.npy')

	max_gradient = 5
	a,b=inputimage.shape
	if hdulist[0].header['FOCALMOD']!='TEKTRONIX':
		if b>a:
			inputimage=np.transpose(inputimage)
		a,b=inputimage.shape
		#print 'a>b unless focalmod == tektronix. a= %s, b= %s, %s' %(a,b,hdulist[0].header['FOCALMOD'])
	xrange=np.arange(0,a,1)
	yrange=np.arange(0,b,1)
	#trace_order_params(xrange,orderparameters)
	
	stepsize=(100/nsteps)
	xslices=[]
	for i in np.round(np.arange(0,100,stepsize)):
		#get xslice locations
		if i==0:
			xslices=np.round(np.percentile(xrange,i))
		else:
			xslices=np.hstack((xslices,np.round(np.percentile(xrange,i))))
	yslices=[]
	for i in np.round(np.arange(5,95,stepsize)):
		#get xslice locations
		if i==0:
			yslices=np.round(np.percentile(yrange,i))
		else:
			yslices=np.hstack((yslices,np.round(np.percentile(yrange,i))))
	

	#reconstruct ordtrace
	for ord, item in enumerate(orderparameters):
		if item != []:
			temp=np.polyval(orderparameters[ord],xrange)#previously [ord][0]
			try: 
				fitted_orders
			except NameError:
				fitted_orders=temp
			else:
				fitted_orders=np.vstack((fitted_orders,temp))
	fitted_orders=np.sort(fitted_orders,axis=0)
	#have now reconstructed ordtrace
	
	#fig = plt.figure(1,figsize=(12,8))
	#plt.imshow(masterflatdata.T)
	#for row in fitted_orders:
	#	yy=np.round(row)
	#	yy=yy.astype('int64')
	#	plt.scatter(xrange,row,color='red')
	#plt.show()
	
	#print fitted_orders


	#make starting array of troughs
	a,b=fitted_orders.shape
	troughs=np.zeros((a-1,b))
	for rowind, row in enumerate(fitted_orders):
		for x in xrange:
			if rowind < len(fitted_orders)-1:
				#last 'order' is in overscan
				troughs[rowind,x]=np.mean((fitted_orders[rowind+1,x],row[x]))
				slice=inputimage[x,:]
				#needs to be the index at the minimum on the image
				#adjustment=np.argmin(slice[row[x]-2:row[x]+2])
				#troughs[rowind,x]=troughs[rowind,x]+(adjustment-2)
	#print "found troughs - now fitting polynomials"
	

	#for row in troughs:
	#	yy=np.round(row)
	#	yy=yy.astype('int64')
	#	plt.plot(xrange,row,color='red')

	
	
	
	coefficients=[]
	for ind, row in enumerate(troughs):
		if row !=[] or ind==len(troughs)-1:
			itercount=0
			xx=xrange
			yy=row
			while 1:
				coeffs=np.polyfit(xx,yy,4)
				vals=np.polyval(coeffs,xx) #variances = data - model
				variances=yy-vals
				maskedvars = sigma_clip(variances,3,1) #sigma clip 3sd 
				mask=maskedvars.mask
				if itercount==2 or np.sum(mask)==0:
					break
				#print "sigma-clipping %s outlier(s) from order" %(np.sum(mask))
				xx=np.delete(xx,mask)
				yy=np.delete(yy,mask)
				itercount=itercount+1
		
			if coefficients==[]:
				coefficients=coeffs			
			else:
				if not coeffs.all==0:
					coefficients=np.vstack((coefficients,coeffs))
	coefficients=coefficients[:-1,:]		
	#have done with finding and refitting troughs
	
	#make array of trough values at slices
	
	trough_values=np.zeros((len(xslices),len(coefficients)))
	for sliceind,xslice in enumerate(xslices):
		for coeffind,coeff in enumerate(coefficients):
			trough_values[sliceind,coeffind]=np.polyval(coeff,xslice)
	
			
	if figures==True:
		plt.figure(1,figsize=(8,8),aspect=1.4)
		plt.subplot(2,2,1)

		plt.title("Inter-Order Troughs")
		plt.imshow(masterflatdata.T)
		xx=xslices#??
		for ind,x in enumerate(xx):
			xvals=[x]*len(trough_values[ind])
			plt.scatter(xvals,trough_values[ind],color='red',  linewidths=0, marker='.')






	firstmins=np.zeros((len(xslices)))
	#now to polyfit to image values per column of these trough_value indices
	#vert slice trough polyfitting at xslice locations
	inputimage=inputimage.T
	vslice_coeffs=[]*nsteps
	for ind, x in enumerate(xslices):
		yvals=np.round(trough_values[ind])
		yvals=yvals.astype('int64')
		xx=np.round(x)
		xx=xx.astype('int64')
		image_vals=np.zeros(yvals.shape)
		for yind,ycoord in enumerate(yvals):
			image_vals[yind]=np.min(inputimage[[ycoord-2,ycoord-1,ycoord,ycoord+1,ycoord+2],[xx-2,xx-1,xx,xx+1,xx+2]])
			#zvals[ind,yind]=image_vals[yind]
		count=0
		
		#plot image_vals for moire pattern before smoothing
		
		# moving minimum and smoothing operation to deal with narrowly spaced order
		# minimum cyclicity.
		windowsize = 10 #pixels for moving max and min calc
		minima = filters.minimum_filter1d(image_vals, windowsize, mode='reflect')
		kern=np.ones(windowsize*2.5)/(windowsize*2.5)
		image_vals = filters.convolve(minima,kern, mode='nearest')

		while 1:
			vcoeffs=np.polyfit(yvals,image_vals,poly_order_y)
			vals=np.polyval(vcoeffs,yvals) #variances = data - model
			variances=yvals-vals
			maskedvars = sigma_clip(variances,3,1) #sigma clip 3sd 
			mask=maskedvars.mask
			if count==1 or np.sum(mask)==0:
				break
			#print "sigma-clipping %s outlier(s) from order" %(np.sum(mask))
			yvals=np.delete(yvals,mask)
			image_vals=np.delete(image_vals,mask)
			count=count+1
	
		if not coeffs.all==0:
			vslice_coeffs.append(vcoeffs)


	#ax = fig.gca(projection='3d')
	#for ind,x in enumerate(xslices):
	#	xx=[x]*len(yrange)	
	#	z=np.polyval(vslice_coeffs[ind],yrange)
	#	ax.plot(xx,yrange,z,color='black')

	
	#now lets do a last set of fits in the other direction - nearly there
	inputimage=inputimage.T
	#will have to iterate over the whole xrange,yrange when we are done to make a fill image
	
	zvals=np.zeros((len(vslice_coeffs),len(yrange)))
	
	# what follows is the two-pass method
	for yind,y in enumerate(yrange):
		for sliceind,coeffs in enumerate(vslice_coeffs):
			zvals[sliceind,yind]=np.polyval(coeffs,y)
	
	if method=='double':

	#fig = plt.figure(1,figsize=(12,8))	
	#plt.imshow(zvals)
	#plt.show() 		
	
		image_coeffs=[]
		for y in yrange:
			itercount=0
			xinds=xslices
			scattervals=zvals[:,y]
			while 1:
				scattercoeffs=np.polyfit(xinds,scattervals,poly_order_x)
				newvals=np.polyval(scattercoeffs,xinds)
				variances=scattervals-newvals
				maskedvars = sigma_clip(variances,3,1) #sigma clip 3sd 
				mask=maskedvars.mask
				if itercount==2 or np.sum(mask)==0:
					break
				print "sigma-clipping %s outlier(s) from order" %(np.sum(mask))
				xinds=np.delete(xinds,mask)
				scattervals=np.delete(scattervals,mask)
				itercount=itercount+1
		
			if not scattercoeffs.all==0:
				#shouldn't occur really
				image_coeffs.append(scattercoeffs)	
		if figures==True:	
			fig = plt.figure(1,figsize=(12,8))
			ax = fig.gca(projection='3d')
			for ind,i in enumerate(image_coeffs):
				z=np.polyval(i,xrange)
				y=[yrange[ind]]*len(xrange)
				ax.plot(xrange,y,z,color='black')
			plt.show()
	
	#now reconstruct the full scatter image
		scatter_image=np.zeros((len(xrange),len(yrange)))
		#print'Construction of scatter image underway'
		#print'This will take a few minutes'
		for xxx in xrange:
			for yyy in yrange:
				scatter_image[xxx,yyy]=np.polyval(image_coeffs[yyy],xxx)
	
	###NOTE last now 1034 may be really bad
	
	# single-pass method
	if method=='single':
	# two dimensional polynomial surface fitting. The order of the polynomials
	# in each direction may be set as args and the output array sized too.
	# outarrays are indices of points to calculate the fit for once coefficients 
	# are found.
	
		

		x, y = np.meshgrid(xslices,yrange)
		z=zvals.T

		xx, yy = np.meshgrid(xrange,yrange)

		# Fit the data using astropy.modeling
		p_init = models.Polynomial2D(degree=6)
		f = fitting.LinearLSQFitter()
		p = f(p_init, x, y, z)
		scatter_image=p(xx,yy)
		# Plot the data with the best-fit model
		if figures==True:
			plt.subplot(2,2,2)
			plt.scatter(x, y, c=z, linewidths=0, marker='.')
			plt.title("Smoothed Sampled Data")
			plt.subplot(2,2,3)
			plt.scatter(xx,yy,c=scatter_image, linewidths=0, marker='.')
			plt.title("Model")
			plt.subplot(2,2,4)
			plt.scatter(xx,yy,c=inputimage.T - scatter_image,  linewidths=0, marker='.')
			plt.title("Residual")
			plt.show()
		
		scatter_image=p(xx,yy)
		
	if figures==True:
		fig = plt.figure(22,figsize=(8,6))
		ax = Axes3D(fig)
		X,Y=np.meshgrid(xrange,yrange)
		ax.plot_wireframe(X,Y,scatter_image,rstride=20,cstride=30)
		plt.title("A Smooth scattered light model")
	#ax.plot_wireframe(X,Y,masterflatdata.T,rstride=20,cstride=30)	
		plt.show()
	

	#np.save('scattered_light_model', scatter_image)	
	return scatter_image 
	
def flat_sp_func(order,ycen,osample,lamb_sp,lambda_sf,use_mask=0,noise=5.85,uncert=False,im_output=False,normflat=False,slitfunc=False):

	#Tu mamy wczytany gotowy rzad w tablice "order"
	#Obtain dimensions of the order array
	nrow,ncol=order.shape
    #noise=0.0 #Noise should be asked as an input parameter above with default=0		  
	n=(nrow+1)*osample+1
	#test=np.zeros((ncol,2))
	#If no mask
	try:
		if (use_mask==0):
			#print'generating mask'
    		#tworzymy maske, jako ze nie jest zdefiniowana
    		#create a mask, as it is not defined
			mask=np.ones((nrow, ncol))
			#j= np.where(order > 39999) #assumes divided by flat??
			mask[np.where(order > 60000)]=0.0
	except:
		#print 'using supplied mask'
		mask=np.copy(use_mask)
	#Sprawdzam, jak jest zdefiniowane lamb_sf
	#Checking for a defined lamb_sf
	if (lambda_sf==0.): 
		lambda_sf=0.1
	y=np.arange(n)/float(osample)-1.
	bklind=np.arange(osample+1)+n*osample
	oind=np.arange(osample+1)*(osample+2)
	olind=oind[0:osample+1]
	for m in range(osample+1, 2*osample+1):
		mm=m-osample
		bklind=np.append(bklind, np.arange(osample+1-mm)+n*m)
		olind=np.append(olind, oind[0:osample-mm+1]+mm)
	#Teraz idzie zgadywane widmo - na modle REDUCE
	#jako juz finalna postac jednowymiarowa
	#Now create spectrum - with REDUCE
	sp=np.repeat(0,ncol)
	sf=np.sum(order*mask,axis=1)
	#Konstrukcja pierwszego oszcowaniea slit function i widma
	#Liczenie mediany z piecioelementowych slotow - wedle procedur w reduce
	#Construction of the first slit function and spectrum
	#Counting median widths - according to the REDUCE procedure
	#Szacujemy pierwsza postac slit function
	#We estimate the first part of the slit function
	sf_med=np.arange(sf.shape[0]-4)
	for i in range(2, sf.shape[0]-2):
		sf_med[i-2]=np.median(sf[i-2:i+3])
	sf[2:sf.shape[0]-2]=sf_med
	sf=sf/np.sum(sf)
	#Szacujemy pierwsza postac widma
	#We estimate the first character of the spectrum
	sp=np.sum((order*mask)*(np.outer(sf,np.repeat(1,ncol))),axis=0)
	sp_med=np.arange(sp.shape[0]-4)
	for i in range(2, sp.shape[0]-2):# use scipy smoothing kernel later
		sp_med[i-2]=np.median(sp[i-2:i+3])
	sp[2:sp.shape[0]-2]=sp_med
	sp=sp/np.sum(sp)*np.sum(order*mask)#these sums were calculated prior...
	dev = np.sqrt(np.sum(mask*(order-np.outer(sf, sp))**2)/np.sum(mask))
	#j= np.where(abs(order-np.outer(sf, sp)) > 3.*dev)
	mask[np.where(abs(order-np.outer(sf, sp)) > 3.*dev)]=0.0
	#Wyznaczemie wagi
	#Calculate weights
	weight=1./np.float64(osample)

########################################################################
	for iter in range(1,25):
	#if iter == 2: gold = np.copy(sp)
	#teraz budujemy macierz, gdzie omega bedzie na przekatnej
	#build a matrix, where Omega will be the diagonal
		Akl=np.zeros((2*osample+1,n))
		Bl=np.zeros((1,n))
		omega=np.repeat(weight,osample+1)
		for i in range(0, ncol):
			#Tworzenie tablic wag, nie wymaga czytania rzedu
			#Creating arrays by weight, does not require reading trace
			omega=np.repeat(weight,osample+1)
			yy=y+ycen[i]
			ind=np.where((yy>=0.0) & (yy<1.))[0]
			i1=ind[0]
			i2=ind[-1]
			omega[0]=yy[i1]#Zmieniamy pierwsza wage w obrebie piksela
						   #Change the first wage within the pixel
			omega[-1]=1.-yy[i2]#Zmieniamy ostatnia wage w obrebie piksela
							   #Change the last wage within the pixel        
			#Ostateczna postac macierzy omega dla pojedynczego piksela
			#The final figure of omega matrix for each pixel
			o=np.outer(omega,omega) #najpierw transponujemy, bo w idlu jest inna notacja wymiarow macierzy (kolumna, wers)
									#first transpose, because idlu is another notation dimensional matrix (column, line)
			o[osample,osample]=o[osample,osample]+o[0,0] #zrobione wedle tego, co jest w reduce
														 #done according to what is in the reduce        
			bkl=np.zeros((2*osample+1,n))
			omega_t=np.reshape(o, o.shape[0]*o.shape[1])
			oo= omega_t[olind]
			for l in range(0, nrow):
				bkl_temp=np.reshape(bkl, bkl.shape[0]*bkl.shape[1])
				t=l*osample+bklind+i1
				bkl_temp[t]=oo*mask[l,i]
			bkl=np.reshape(bkl_temp,(2*osample+1,n))
			oo=o[osample, osample]
			for l in range(1, nrow):
				bkl[osample,l*osample+i1]=oo*mask[l,i]
			bkl[osample,nrow*osample+i1]=omega[osample]**2*mask[nrow-1,i]
			for m in range (0,osample):
				bkl[m,(osample-m):(n)]=bkl[2*osample-m,0:(n-osample+m)]
			Akl=Akl+(sp[i]**2)*bkl
		#Tu teoretycznie mamy Akl jak z artykulu o reduce rownianie 10
		#powinno byc poprawnie powyzej
		#Here we theoretically Akl article about how to reduce a par 10
		#should be properly above	
		#Teraz robimy macierz Bkl, ktora w artykule jest zapisana jako macierz R
		#Now we Bkl matrix, which the article has written as matrix R_k
			o=np.zeros((1,n))
			for l in range (0, nrow):
				o[0,l*osample+i1:l*osample+i1+osample+1]=order[l,i]*weight*mask[l,i]
			for l in range (1, nrow):
				o[0,l*osample+i1]=order[l-1,i]*omega[osample]*mask[l-1,i]+order[l,i]*omega[0]*mask[l,i]
			o[0,i1]=order[0,i]*omega[0]*mask[0,i]
			o[0,nrow*osample+i1]=order[nrow-1,i]*omega[osample]*mask[nrow-1,i]
			Bl=Bl+sp[i]*o
		#Koniec petli po i
		#mamy prawa strone rowania 8, zdefiniowana rownaniem 1
		#The end of the loop, and we have eight right side of the equation, defined equation, one
		tab=np.zeros((n,2))
		#definiujemy czynnik lambda
		lamda=lambda_sf*np.sum(Akl[osample,:])/n
		lambda_tab=np.zeros((1,n))
		for elem in range(0,n):
			lambda_tab[0,elem]=lamda
			#wkladamy czynnik lamda do tablicy Akl
			#rownowazne tablicy Bjk w pracy o reduce
			# put our factor lamda Akl equivalent to an array of array Bjk reduce the work of		
		Akl[osample,0]=Akl[osample,0]+lambda_tab[0,0]
		Akl[osample,n-1]=Akl[osample,n-1]+lambda_tab[0,n-1]
		Akl[osample,1:n-1]=Akl[osample,1:n-1]+2.*lambda_tab[0,1:n-1]
		Akl[osample+1,0:n-1]=Akl[osample+1,0:n-1]-lambda_tab[0,0:n-1]
		Akl[osample-1,1:n]=Akl[osample-1,1:n]-lambda_tab[0,1:n]
		Bl=Bl.T
		x = solve_banded((osample,osample), Akl, Bl, overwrite_ab=True, overwrite_b=True)
		ind0=[np.where(x<0)]
		x[ind0]=0.0
		sf=x/np.sum(x)*osample
		r=np.repeat(0.,sp.shape[0])
		sp_old=np.copy(sp)
		dev_new=0.0
		for i in range(0, ncol):
			omega=np.repeat(weight,osample)
			yy=y+ycen[i]
			ind1=np.where((yy>=0.0) & (yy<nrow))[0]
			i1=ind1[0]
			i2=ind1[-1]
			omega[0]=yy[i1]
			ssf=np.reshape(sf[i1:i2+1],(nrow, osample))
			o=np.dot(ssf,omega)
			#figures=True #plot slit funcs in iteration
			#if figures==True:
			#	if i>5:
			#		plt.plot(ssf)
			#		plt.show()
			yyy=nrow-yy[i2]
			o[0:nrow-1]=o[0:nrow-1]+ssf[1:nrow,0]*yyy
			o[nrow-1]=o[nrow-1]+sf[i2]*yyy
			r[i]=np.dot((order[:,i]*mask[:,i]),o)
			sp[i] = np.sum( o**2 * mask[:,i])
			if (iter > 1):
				norm=r[i]/sp[i]
				j= np.where(abs(order[:,i]-np.transpose(norm*o))>7.*dev)		
				mask[j,i]=0.0			
		
				dev_new=dev_new+np.sum(mask[:,i]*(order[:,i]-np.transpose(norm*o))**2)
		if (iter >1 ):
			dev=np.sqrt(noise**2+dev_new/np.sum(mask))
		if (lamb_sp != 0.0):
			lamda=lamb_sp*np.sum(sp)/ncol
			ab=np.zeros((3,ncol))
			ab[0,1:]=-lamda
			ab[2,:-1]=-lamda
			ab[1,0]=lamda+1.
			ab[1,-1]=lamda+1.
			ab[1,1:-1]=2.*lamda+1.
			sp=solve_banded((1,1), ab, r/sp, overwrite_ab=False, overwrite_b=False)
		else:
			sp = r/sp
		if ((abs(sp-sp_old)/sp.max()).max()<0.00001):
			break
	
	#have a look at im_out once done i guess - reconstructed image?
	jbad=np.array(0,dtype=np.int64)
	unc=np.repeat(0.,ncol)
	im_out=np.zeros_like((order))
	slitfunc_out=np.zeros_like((order))
	for i in range(0, ncol):
		omega=np.repeat(weight,osample)
		yy=y+ycen[i]
		ind1=np.where((yy>=0.0) & (yy<nrow))[0]
		i1=ind1[0]
		i2=ind1[-1]
		omega[0]=yy[i1]
		ssf=np.reshape(sf[i1:i2+1],(nrow, osample))
		o=np.dot(ssf,omega)		
		yyy=nrow-yy[i2]
		o[0:nrow-1]=o[0:nrow-1]+ssf[1:nrow,0]*yyy
		o[nrow-1]=o[nrow-1]+sf[i2]*yyy
		j = np.where((abs(order[:,i]-np.transpose(sp[i]*o))).flatten()<5*dev)
		b = np.where((abs(order[:,i]-np.transpose(sp[i]*o))).flatten()>=5*dev)
		nj=sp[j].shape[0] #length vector of good spatial values
		#done in three steps iteratively b are outliers I think
		if (nj< nrow):
			jbad=np.append(jbad, nrow*i+b[0])
		if (nj>2):
			ss=np.sum((order[j,i]-sp[i]*o[j])**2)
			xx=np.sum((o[j]-np.mean(o[j]))**2)*(nj-2)
			unc[i]=ss/xx
		else:
			unc[i]=0.0
		#is this error?? unc == uncertainty?
		im_out[:,i]=np.transpose(sp[i]*o)
		slitfunc_out[:,i]=np.transpose(o)
	
	if (uncert ==True) and (im_output ==True):
		return(sp,unc,im_out,slitfunc_out)#return unc perhaps as optional input parameter?
	elif uncert==True:
		return(sp,unc,slitfunc_out)
	elif im_output==True:
		return(sp,im_out,slitfunc_out)
	else: return(sp,slitfunc_out)
	
def sci_sp_func(order,ycen,osample,lamb_sp,lambda_sf,use_mask=0,noise=5.85, bkgd=0):
	if bkgd.shape!=order.shape:
		bkgd=np.zeros_like(order)
	#Tu mamy wczytany gotowy rzad w tablice "order"
	#Obtain dimensions of the order array
	nrow,ncol=order.shape
    #noise=0.0 #Noise should be asked as an input parameter above with default=0		  
	n=(nrow+1)*osample+1
	#test=np.zeros((ncol,2))
	#If no mask
	if (use_mask.shape!=order.shape):
		print'Extraction - Mask not supplied - generating a simple one for you'
    	#tworzymy maske, jako ze nie jest zdefiniowana
    	#create a mask, as it is not defined
		mask=np.ones_like(order)
		#j= np.where(order > 39999) #assumes divided by flat??
		mask[np.where(order > 39999)]=0.0
	else:
		#print 'Extraction - Using supplied mask'
		mask=np.copy(use_mask)
	#Sprawdzam, jak jest zdefiniowane lamb_sf
	#Checking for a defined lamb_sf
	if (lambda_sf==0.): 
		lambda_sf=0.1
	y=np.arange(n)/float(osample)-1.
	bklind=np.arange(osample+1)+n*osample
	oind=np.arange(osample+1)*(osample+2)
	olind=oind[0:osample+1]
	for m in range(osample+1, 2*osample+1):
		mm=m-osample
		bklind=np.append(bklind, np.arange(osample+1-mm)+n*m)
		olind=np.append(olind, oind[0:osample-mm+1]+mm)
	#Teraz idzie zgadywane widmo - na modle REDUCE
	#jako juz finalna postac jednowymiarowa
	#Now create spectrum - with REDUCE
	sp=np.repeat(0,ncol)
	sf=np.sum(order*mask,axis=1)
	#Konstrukcja pierwszego oszcowaniea slit function i widma
	#Liczenie mediany z piecioelementowych slotow - wedle procedur w reduce
	#Construction of the first slit function and spectrum
	#Counting median widths - according to the REDUCE procedure
	#Szacujemy pierwsza postac slit function
	#We estimate the first part of the slit function
	sf_med=np.arange(sf.shape[0]-4)
	for i in range(2, sf.shape[0]-2):
		sf_med[i-2]=np.median(sf[i-2:i+3])
	sf[2:sf.shape[0]-2]=sf_med
	sf=sf/np.sum(sf)
	#Szacujemy pierwsza postac widma
	#We estimate the first character of the spectrum
	sp=np.sum((order*mask)*(np.outer(sf,np.repeat(1,ncol))),axis=0)
	sp_med=np.arange(sp.shape[0]-4)
	for i in range(2, sp.shape[0]-2):# use scipy smoothing kernel later
		sp_med[i-2]=np.median(sp[i-2:i+3])
	sp[2:sp.shape[0]-2]=sp_med
	sp=sp/np.sum(sp)*np.sum(order*mask)#these sums were calculated prior...
	dev = np.sqrt(np.sum(mask*(order-np.outer(sf, sp))**2)/np.sum(mask))
	#j= np.where(abs(order-np.outer(sf, sp)) > 3.*dev)
	mask[np.where(abs(order-np.outer(sf, sp)) > 3.*dev)]=0.0
	#Wyznaczemie wagi
	#Calculate weights
	weight=1./np.float64(osample)

########################################################################
	for iter in range(1,25):
	#if iter == 2: gold = np.copy(sp)
	#teraz budujemy macierz, gdzie omega bedzie na przekatnej
	#build a matrix, where Omega will be the diagonal
		Akl=np.zeros((2*osample+1,n))
		Bl=np.zeros((1,n))
		omega=np.repeat(weight,osample+1)
		for i in range(0, ncol):
			#Tworzenie tablic wag, nie wymaga czytania rzedu
			#Creating arrays by weight, does not require reading trace
			omega=np.repeat(weight,osample+1)
			yy=y+ycen[i]
			ind=np.where((yy>=0.0) & (yy<1.))[0]
			i1=ind[0]
			i2=ind[-1]
			omega[0]=yy[i1]#Zmieniamy pierwsza wage w obrebie piksela
						   #Change the first wage within the pixel
			omega[-1]=1.-yy[i2]#Zmieniamy ostatnia wage w obrebie piksela
							   #Change the last wage within the pixel        
			#Ostateczna postac macierzy omega dla pojedynczego piksela
			#The final figure of omega matrix for each pixel
			o=np.outer(omega,omega) #najpierw transponujemy, bo w idlu jest inna notacja wymiarow macierzy (kolumna, wers)
									#first transpose, because idlu is another notation dimensional matrix (column, line)
			o[osample,osample]=o[osample,osample]+o[0,0] #zrobione wedle tego, co jest w reduce
														 #done according to what is in the reduce        
			bkl=np.zeros((2*osample+1,n))
			omega_t=np.reshape(o, o.shape[0]*o.shape[1])
			oo= omega_t[olind]
			for l in range(0, nrow):
				bkl_temp=np.reshape(bkl, bkl.shape[0]*bkl.shape[1])
				t=l*osample+bklind+i1
				bkl_temp[t]=oo*mask[l,i]
			bkl=np.reshape(bkl_temp,(2*osample+1,n))
			oo=o[osample, osample]
			for l in range(1, nrow):
				bkl[osample,l*osample+i1]=oo*mask[l,i]
			bkl[osample,nrow*osample+i1]=omega[osample]**2*mask[nrow-1,i]
			for m in range (0,osample):
				bkl[m,(osample-m):(n)]=bkl[2*osample-m,0:(n-osample+m)]
			Akl=Akl+(sp[i]**2)*bkl
		#Tu teoretycznie mamy Akl jak z artykulu o reduce rownianie 10
		#powinno byc poprawnie powyzej
		#Here we theoretically Akl article about how to reduce a par 10
		#should be properly above	
		#Teraz robimy macierz Bkl, ktora w artykule jest zapisana jako macierz R
		#Now we Bkl matrix, which the article has written as matrix R_k
			o=np.zeros((1,n))
			for l in range (0, nrow):
				o[0,l*osample+i1:l*osample+i1+osample+1]=order[l,i]*weight*mask[l,i]
			for l in range (1, nrow):
				o[0,l*osample+i1]=order[l-1,i]*omega[osample]*mask[l-1,i]+order[l,i]*omega[0]*mask[l,i]
			o[0,i1]=order[0,i]*omega[0]*mask[0,i]
			o[0,nrow*osample+i1]=order[nrow-1,i]*omega[osample]*mask[nrow-1,i]
			Bl=Bl+sp[i]*o
		#Koniec petli po i
		#mamy prawa strone rowania 8, zdefiniowana rownaniem 1
		#The end of the loop, and we have eight right side of the equation, defined equation, one
		tab=np.zeros((n,2))
		#definiujemy czynnik lambda
		lamda=lambda_sf*np.sum(Akl[osample,:])/n
		lambda_tab=np.zeros((1,n))
		for elem in range(0,n):
			lambda_tab[0,elem]=lamda
			#wkladamy czynnik lamda do tablicy Akl
			#rownowazne tablicy Bjk w pracy o reduce
			# put our factor lamda Akl equivalent to an array of array Bjk reduce the work of		
		Akl[osample,0]=Akl[osample,0]+lambda_tab[0,0]
		Akl[osample,n-1]=Akl[osample,n-1]+lambda_tab[0,n-1]
		Akl[osample,1:n-1]=Akl[osample,1:n-1]+2.*lambda_tab[0,1:n-1]
		Akl[osample+1,0:n-1]=Akl[osample+1,0:n-1]-lambda_tab[0,0:n-1]
		Akl[osample-1,1:n]=Akl[osample-1,1:n]-lambda_tab[0,1:n]
		Bl=Bl.T
		x = solve_banded((osample,osample), Akl, Bl, overwrite_ab=True, overwrite_b=True)
		ind0=[np.where(x<0)]
		x[ind0]=0.0
		sf=x/np.sum(x)*osample
		r=np.repeat(0.,sp.shape[0])
		sp_old=np.copy(sp)
		dev_new=0.0
		for i in range(0, ncol):
			omega=np.repeat(weight,osample)
			yy=y+ycen[i]
			ind1=np.where((yy>=0.0) & (yy<nrow))[0]
			i1=ind1[0]
			i2=ind1[-1]
			omega[0]=yy[i1]
			ssf=np.reshape(sf[i1:i2+1],(nrow, osample))
			o=np.dot(ssf,omega)
			#figures=True #plot slit funcs in iteration
			#if figures==True:
			#	if i>5:
			#		plt.plot(ssf)
			#		plt.show()
			yyy=nrow-yy[i2]
			o[0:nrow-1]=o[0:nrow-1]+ssf[1:nrow,0]*yyy
			o[nrow-1]=o[nrow-1]+sf[i2]*yyy
			r[i]=np.dot((order[:,i]*mask[:,i]),o)
			sp[i] = np.sum( o**2 * mask[:,i])
			if (iter > 1):
				norm=r[i]/sp[i]
				j= np.where(abs(order[:,i]-np.transpose(norm*o))>7.*dev)		
				mask[j,i]=0.0			
		
				dev_new=dev_new+np.sum(mask[:,i]*(order[:,i]-np.transpose(norm*o))**2)
		if (iter >1 ):
			dev=np.sqrt(noise**2+dev_new/np.sum(mask))
		if (lamb_sp != 0.0):
			lamda=lamb_sp*np.sum(sp)/ncol
			ab=np.zeros((3,ncol))
			ab[0,1:]=-lamda
			ab[2,:-1]=-lamda
			ab[1,0]=lamda+1.
			ab[1,-1]=lamda+1.
			ab[1,1:-1]=2.*lamda+1.
			sp=solve_banded((1,1), ab, r/sp, overwrite_ab=False, overwrite_b=False)
		else:
			sp = r/sp
		if ((abs(sp-sp_old)/sp.max()).max()<0.00001):
			break
	
	jbad=np.array(0,dtype=np.int64)
	unc=np.repeat(0.,ncol)
	im_out=np.zeros_like((order))
	var=np.repeat(0.,ncol)
	
	for i in range(0, ncol):
		omega=np.repeat(weight,osample)
		yy=y+ycen[i]
		ind1=np.where((yy>=0.0) & (yy<nrow))[0]
		i1=ind1[0]
		i2=ind1[-1]
		omega[0]=yy[i1]
		ssf=np.reshape(sf[i1:i2+1],(nrow, osample))
		o=np.dot(ssf,omega)		
		yyy=nrow-yy[i2]
		o[0:nrow-1]=o[0:nrow-1]+ssf[1:nrow,0]*yyy
		o[nrow-1]=o[nrow-1]+sf[i2]*yyy
		j = np.where((abs(order[:,i]-np.transpose(sp[i]*o))).flatten()<5*dev)
		b = np.where((abs(order[:,i]-np.transpose(sp[i]*o))).flatten()>=5*dev)
		nj=sp[j].shape[0]
		#done in three steps iteratively b are outliers
		#data 
		if (nj< nrow):
			jbad=np.append(jbad, nrow*i+b[0])
		if (nj>2):
			ss=np.sum((order[j,i]-sp[i]*o[j])**2)
			xx=np.sum((o[j]-np.mean(o[j]))**2)*(nj-2)
			unc[i]=ss/xx
		else:
			unc[i]=0.0
		#replace this unc with better
		im_out[:,i]=np.transpose(sp[i]*o)
		var[i]=sp[i]*(np.sum((im_out[:,i]+bkgd[:,i]+(np.ones_like(bkgd[:,i])*(noise**2))))/np.sum((im_out[:,i]*mask[:,i])))


	return sp, var
			
def extract_and_normalise_flat():
	print "Normalise Flat: Beginning process to find blaze functions and pixel sensitivity mask."
	#assumes premade scatter, orderlocations, and masterflat
	scatter=findscatter(file='radius_masterflat.fits')
	flat=pyfits.open('radius_masterflat.fits')
	
	try:
		flat_tab=flat[0].data*flat[0].header['RO_GAIN']
		scatter=scatter*flat[0].header['RO_GAIN']
	except:
		flat_tab=flat[0].data*2.85
		scatter=scatter*2.85
		
	try: noise=header['RO_NOISE']
	except: noise=5.85
	
	a,b=flat_tab.shape
	if b>a:
		flat_tab=np.transpose(flat_tab)
	a,b=flat_tab.shape
	xrange=np.arange(0,a,1)
	yrange=np.arange(0,b,1)
	
	if flat_tab.shape[0]!=scatter.shape[0]:
		scatter=scatter.T
	
	data=flat_tab-scatter

	orderparameters=np.load('order_definition_parameters.npy')
	#make array of ordertraces: (dispersionlength ,ordernumber)
	fitted_orders=np.zeros(len(xrange))
	#fitted_orders=np.zeros(([len(orderparameters),len(xrange)]))
	for ord, item in enumerate(orderparameters):
		if orderparameters[ord]!=[]:
			coeffs=orderparameters[ord]
			#print ord, coeffs
			yyy=np.polyval(coeffs,xrange)
			if ord==0:
				fitted_orders=yyy
			else:
				fitted_orders=np.vstack((fitted_orders,yyy))
	fitted_orders.sort(axis=0)        
	cen=fitted_orders.T
	
	cen=cen[:,3:-2] #skip first and last three orders
	
	#smoothing step in dispersion direction 15-20 px or spline before feed in to this
	flat_tab_mod=data
	#windowsize=12
	#scipy convolve
	#kern=np.ones(windowsize)/windowsize
	for y in yrange:
		#flat_tab_mod[:,y]=filters.convolve(data[:,y],kern,mode='nearest') - seemingly unneeded
		flat_tab_mod[:,y]=filters.median_filter(flat_tab_mod[:,y],25)
	
	width=21
	normed_flat=np.zeros(data.shape)
	slitfuncmodel=np.zeros(data.shape)
	a,b=cen.shape
	blazefunctions=np.zeros(cen.shape)
	uncertainties=np.zeros(cen.shape)
	for ord in np.arange(0,b,1):
		i=0.
		ycen=cen[:,ord] #15th order only
		for elem in cen[:,ord]:
			elem=int(elem)
			if (i==0):
				order=np.transpose(flat_tab_mod[i,elem-width:elem+width+1])
				i=i+1
			else: #elif
				if i<a:
					temp=np.transpose(flat_tab_mod[i,elem-width:elem+width+1])
					order=np.column_stack((order,temp))
					i=i+1
		osample=10 
		lambda_sf=25.0 
		lambda_sp=0.0 
		use_mask=0 #Else supply a mask - maybe this should iterate 1st pass make mask, repeat
		#if (np.isfinite(order).all() and not np.isnan(order).all())==True:
		#	print 'Normalise Flat: Data is good for order %s.' %(ord+1)
		ycen=np.modf(cen[:,ord])[0]
		print "Normalise Flat: Order %s being calculated."%(ord+1)
		blazefunc,uncert,reconstruction,slitfunc=flat_sp_func(order, ycen,osample,lambda_sp, lambda_sf,use_mask=0,uncert=True,im_output=True,noise=noise,slitfunc=True)
		for x in xrange:
			elem=int(cen[x,ord])
			normed_flat[x,elem-width:elem+width+1]=reconstruction[:,x]
			slitfuncmodel[x,elem-width:elem+width+1]=slitfunc[:,x]
		uncertainties[:,ord]=uncert
	mask=np.ones(normed_flat.shape,dtype='bool')
	temp=np.zeros(normed_flat.shape)
	for x in xrange:
		temp[x,:]=maxfilt(normed_flat[x,:], 25, mode='reflect')
	temp[temp<0.000001]=0.000001
	temp=normed_flat/temp
	mask[temp<0.25]=0.0#0.8
	normed_flat=(data+scatter)/(normed_flat+scatter) #now normed_flat is the px sens mask
	mask[normed_flat<0.25]=0.0#0.8
	normed_flat[mask == 0.0]=1.0
	var=np.zeros(cen.shape)
	#blazefuncs=True
	print "Normalise Flat: Now extracting blaze functions"
	blazefunctions=np.zeros(cen.shape)
	normed_data=data/normed_flat
	for ord in np.arange(0,b,1):
		i=0.
		ycen=cen[:,ord] #15th order only
		for elem in cen[:,ord]:
			elem=int(elem)
			if (i==0):
				order=np.transpose(normed_data[i,elem-width:elem+width+1])
				ordmask=np.transpose(mask[i,elem-width:elem+width+1])
				ordscatter=np.transpose(scatter[i,elem-width:elem+width+1])
				i=i+1
			else: #elif
				if i<a:
					temp=np.transpose(normed_data[i,elem-width:elem+width+1])
					temp_mask=np.transpose(mask[i,elem-width:elem+width+1])
					temp_scatter=np.transpose(scatter[i,elem-width:elem+width+1])
					order=np.column_stack((order,temp))
					ordmask=np.column_stack((ordmask,temp_mask))
					ordscatter=np.column_stack((ordscatter,temp_scatter))
					
					i=i+1
		osample=10 
		lambda_sf=25.0 
		lambda_sp=0.0 
		#if (np.isfinite(order).all() and not np.isnan(order).all())==False:
		#	print 'Normalise Flat: Extracting blaze function - Data is bad for order %s.' %(ord+1)
		ycen=np.modf(cen[:,ord])[0] #used to be np.modf()[0] tried round
		print "Normalise Flat: Extracting blaze function - Order %s being calculated."%(ord+1)
		blazefunc,sf=flat_sp_func(order, ycen,osample,lambda_sp, lambda_sf,use_mask=ordmask,uncert=False,im_output=False,noise=noise)
		blazefunctions[:,ord]=blazefunc
		#use blazefunc,sf to derive uncert with readnoise and background.

		for ind, i in enumerate(blazefunc):
			var[ind,ord]=blazefunc[ind]*(np.sum((sf[:,ind]*blazefunc[ind]+ordscatter[:,ind]+(np.ones_like(ordscatter[:,ind])*(noise**2))))/np.sum((sf[:,ind]*ordmask[:,ind]*blazefunc[ind])))

	print "Normalise Flat: Done with blaze functions"
	#np.save('uncert',uncertainties)
	np.save('blaze_functions', blazefunctions)
	np.save('px_mask', mask)
	np.save('normed_flat', normed_flat)
	np.save('slitfuncs',slitfuncmodel)
	#plot blazefunctions
	#figures=True
	figures=False
	if figures is True:
		plt.subplot(2,2,1)
		for i in np.arange(1,blazefunctions.shape[1]):
			plt.plot(blazefunctions[:,i])
		plt.xlim(0,2746)
		plt.subplot(2,2,4)
		plt.imshow(normed_flat.T)
		plt.subplot(2,2,2)
		plt.imshow(data.T)
		plt.subplot(2,2,3)
		plt.imshow(mask.T)
		plt.show()	
	
	print"Normalise Flat: Process completed, sorry it took so long."
	return blazefunctions,var,normed_flat,mask,slitfuncmodel
		
def extract_arc(input_file='17feb11901.fits'):
	#happens after badmask creation in normflat.
	#probably should polynomial background too.
	#as per flat extraction but a mere summing in the spatial direction 
	#- need no real fine tuning to this as it's more location than intensity specific
	#good enough to px scales at least.
	hdulist=pyfits.open(input_file)
	header=hdulist[0].header
	try:
		gain=header['RO_GAIN']
	except:
		gain=2.85
	try:
		read_noise=header['RO_NOISE']
	except:
		read_noise=5.25
	data=gain*hdulist[0].data

	a,b=data.shape
	if b>a:
		data=data.T
		a,b=data.shape
	
	xrange=np.arange(0,a,1)
	yrange=np.arange(0,b,1)
	orderparameters=np.load('order_definition_parameters.npy')
	#fitted_orders= trace_order_params(xrange,orderparameters)
	
	#make array of ordertraces: (dispersionlength ,ordernumber)
	fitted_orders=np.zeros(len(xrange))
	#fitted_orders=np.zeros(([len(orderparameters),len(xrange)]))
	for ord, item in enumerate(orderparameters):
		if orderparameters[ord]!=[]:
			coeffs=orderparameters[ord]
			#print ord, coeffs
			yyy=np.polyval(coeffs,xrange)
			if ord==0:
				fitted_orders=yyy
			else:
				fitted_orders=np.vstack((fitted_orders,yyy))
	fitted_orders.sort(axis=0)        
	cen=fitted_orders.T
	cen=cen[:,3:-2] #skip first and last three orders
	#print 'finding scattered light'
	background = findscatter(file=input_file,nsteps = 100,poly_order_x = 6,poly_order_y = 4,figures=False, method='single')
	px_mask=np.load('px_mask.npy')
	try: #from flat field extraction
		slitfuncs=np.load('slitfuncs.npy')
		got_slitfuncs=True
	except:
		got_slitfuncs=False
	
	if a!=slitfuncs.shape[0]:
		slitfuncs=slitfuncs.T
	if a!=background.shape[0]:
		background=background.T
	if a!=px_mask.shape[0]:
		px_mask=px_mask.T
	
	data=(data-background)*px_mask #background subtraction
	slitfuncs=slitfuncs*px_mask
	flat_tab_mod=data
	#windowsize=12
	#scipy convolve
	#kern=np.ones(windowsize)/windowsize
	
	width=13

	a,b=cen.shape
	ext_arc=np.zeros(cen.shape)
	ext_arc_basic=np.zeros(cen.shape)
	unc=np.zeros(cen.shape)
	variance=np.zeros(cen.shape)
	var=np.zeros(cen.shape)
	for ord in np.arange(0,b,1):
		i=0.
		ycen=cen[:,ord] #15th order only
		for elem in cen[:,ord]:
			elem=np.round(elem)
			if (i==0):
				order=np.transpose(flat_tab_mod[i,elem-width:elem+width+1])
				if got_slitfuncs==True:
					sfunc=np.transpose(slitfuncs[i,elem-width:elem+width+1])
					ord_mask=np.transpose(px_mask[i,elem-width:elem+width+1])
				bgd=np.transpose(background[i,elem-width:elem+width+1])
				i+=1
			else: #elif
				if i<a:
					temp=np.transpose(flat_tab_mod[i,elem-width:elem+width+1])
					order=np.column_stack((order,temp))
					if got_slitfuncs==True:
						tempsfunc=np.transpose(slitfuncs[i,elem-width:elem+width+1])
						sfunc=np.column_stack((sfunc,tempsfunc))
						temp_ord_mask=np.transpose(px_mask[i,elem-width:elem+width+1])
						ord_mask=np.column_stack((ord_mask,temp_ord_mask))
					tempbgd=np.transpose(background[i,elem-width:elem+width+1])
					bgd=np.column_stack((bgd,tempbgd))
					i+=1

		order[order<0.0]=0.0
		sfunc[sfunc<0.0]=0.0
	
		for column in xrange: #can put better uncert alg in loop in extraction
			colmask=ord_mask[:,column]
			xxx=sfunc[:,column]
			xxx=xxx[np.where(colmask==True)]
			colback=bgd[:,column]
			#colback=colback[np.where(colmask==True)]
			colorder=order[:,column]
			colorder=colorder[np.where(colmask==True)]
			ext_arc[column,ord]=least_squares_solver(xxx[:,None],colorder)

			#var is the variance array
			var[column,ord]=ext_arc[column,ord]*np.sum((sfunc[:,column]*ext_arc[column,ord]+colback+(read_noise**2)))/np.sum((xxx*ext_arc[column,ord]))
			#where colmask==True
			#aa=xxx[:,None]
			#aa=aa[np.where(colmask==True)]
			#bb=np.abs((order[:,column]-read_noise**2)) #order=data-background
			#bb=bb[np.where(colmask==True)]
			#variance[column,ord]=least_squares_solver(aa,bb)
			
			
		print 'arc order %s acquired' %ord
		#sum in spatial direction for arc?
		#need to rewrite p&V to pull out sp profiles prior to reconstruction
		#option - try using arc spatial profiles to extract arc spectra...
		#more time consuming but better
		# they're saved as slitfuncs.npy
		#perhaps not so time consuming as I can use the compiled linear solver
		#for order in orders, for slice in x, solve I*slitfunction[slice]*mask=order[slice]*mask
		#mask will set I*0=0 - will not weight the soln by those points
		#but will need catch if vals.all() == 0
		
		### Simple extraction - can be commented out once satisfied with ext+unc
	#	try: # this gets average value spatially
	#		ext_arc_basic[:,ord]=np.sum(order,axis=0)/(order!=0).sum(0)
	#	except: print 'failed simple order extraction for %s'%ord #who cares really
	#plotting loop
	
	#plt.subplot(2,1,1)
	#plt.plot(ext_arc[:,20])
	#plt.subplot(2,1,2)
	#plt.plot(var[:,20]**0.5,color='red')
	#plt.show()

	#one should note from the plot that the differences between the spatial profile extraction
	#and the simple non-zero mean method are *very small
	#the computation overhead is small also (compiled C based linear solver), so the spatial profile
	#extraction method should be used. There is also some slight oddity in the 
	#stepwise nature of the mean solution due to the number of pixels available to the non-zero method.
	#this makes some step function effects in the extraction vs the sp profile method.

	return ext_arc,var

def extract_science_or_I2flat(input_file='17feb12035.fits'):
	#get ordlocs from file
	#calc bkgd from ordlocs, input_file
	#get noise,gain from input_file
	#get mask from saved file or extract_and_normalise_flat
	#extract - retain sp, ext
	#calc uncert form ext,sp,mask,bkgd,noise
	hdulist=pyfits.open(input_file)
	header=hdulist[0].header
	try:
		gain=header['RO_GAIN']
	except:
		gain=2.85
	try:
		read_noise=header['RO_NOISE']
	except:
		read_noise=5.25
		
	data=gain*hdulist[0].data

	a,b=data.shape
	if b>a:
		data=data.T
		a,b=data.shape
	
	xrange=np.arange(0,a,1)
	yrange=np.arange(0,b,1)
	orderparameters=np.load('order_definition_parameters.npy')
	#fitted_orders= trace_order_params(xrange,orderparameters)
	
	#make array of ordertraces: (dispersionlength ,ordernumber)
	fitted_orders=np.zeros(len(xrange))
	#fitted_orders=np.zeros(([len(orderparameters),len(xrange)]))
	for ord, item in enumerate(orderparameters):
		if orderparameters[ord]!=[]:
			coeffs=orderparameters[ord]
			#print ord, coeffs
			yyy=np.polyval(coeffs,xrange)
			if ord==0:
				fitted_orders=yyy
			else:
				fitted_orders=np.vstack((fitted_orders,yyy))
	fitted_orders.sort(axis=0)        
	cen=fitted_orders.T
	cen=cen[:,3:-2] #skip first and last three orders
	a,b=cen.shape
	#print 'finding scattered light'
	background = findscatter(file=input_file,nsteps = 100,poly_order_x = 6,poly_order_y = 4,figures=False, method='single')
	px_mask=np.load('px_mask.npy')
	
	if data.shape[0]!=background.shape[0]:
		background=background.T
	data=data-background#care here!!!!!
	
	#have to deal with normalised flat division too :/
	#what's the deal with this vs blazefunc correction? does it fix it?
	normed_flat=np.load('normed_flat.npy')
	if normed_flat.shape!=data.shape:
		normed_flat=normed_flat.T
	data=data/normed_flat
	osample=10 
	lambda_sf=25.0 
	lambda_sp=0.0 
	width=8
	print "Exctraction: Now extracting spectrum and uncertainty"
	extracted_spectrum=np.zeros(cen.shape)
	spectrum_variance=np.zeros(cen.shape)
	for ord in np.arange(0,b,1):
		i=0.
		ycen=cen[:,ord] 
		for elem in cen[:,ord]:
			elem=int(elem)
			if (i==0):
				order=np.transpose(data[i,elem-width:elem+width+1])
				ordmask=np.transpose(px_mask[i,elem-width:elem+width+1])
				ordscatter=np.transpose(background[i,elem-width:elem+width+1])
				i=i+1
			else: #elif
				if i<a:
					temp=np.transpose(data[i,elem-width:elem+width+1])
					temp_mask=np.transpose(px_mask[i,elem-width:elem+width+1])
					temp_scatter=np.transpose(background[i,elem-width:elem+width+1])
					order=np.column_stack((order,temp))
					ordmask=np.column_stack((ordmask,temp_mask))
					ordscatter=np.column_stack((ordscatter,temp_scatter))	
					i=i+1
			osample=10 
			lambda_sf=25.0 
			lambda_sp=0.0 
		if (np.isfinite(order).all() and not np.isnan(order).all())==False:
			print 'Extracting %s - Data bad for order %s.' %(input_file,ord+1)
		ycen=np.modf(cen[:,ord])[0] #used to be np.modf()[0] tried round
		print "Extracting %s - Order %s being calculated."%(input_file,ord+1)
		ext,var=sci_sp_func(order,ycen,osample=10,lamb_sp=0.0,lambda_sf=25.0,use_mask=ordmask,noise=read_noise,bkgd=ordscatter)
		extracted_spectrum[:,ord]=ext
		spectrum_variance[:,ord]=var
	#define some spatial extent for order extraction
	#call p&V ext method, output ext, unc
	#sp for plotting
	figs=False
	#I have some substantial stuff around to do with the formatting of the output.
	if figs==True:
		plt.subplot(2,2,1)
		plt.plot(extracted_spectrum[:,17])
		plt.subplot(2,2,3)
		plt.plot(spectrum_variance[:,17]**0.5,color='r')
		plt.subplot(2,2,2)
		plt.plot(extracted_spectrum[:,27])
		plt.subplot(2,2,4)
		plt.plot(spectrum_variance[:,27]**0.5,color='r')
		plt.show()
	return extracted_spectrum,spectrum_variance

#example usage
#blazefunctions,var,normed_flat,mask,slitfuncmodel=extract_and_normalise_flat()
#sp,unc=extract_science_or_I2flat(input_file='....')


#get arc spec for night
#use input ThAr linelist to match to ThAr extraction
#this is first guess
#get spec to get wavesol
#use match FFT I2 spec to match with first guess

#def functional_blazes():
#blazefunctions=np.load('blaze_functions.npy')
#fit generalised functional form to the blazes to deal with fringing
#need wavelength solution to finish this
#(k/2)*(  ((c/(k+0.17))/wavelength) -1) = nu where k = order number and c is some const ~3959000
#as you see - needs wavelength solution
#for order in orders do:
	
